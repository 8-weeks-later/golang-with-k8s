openapi: 3.1.0
servers:
  - description: 42 MANITO API DEV SERVER
    url: 'https://api.dev.42manito.com/'
  - description: 42 MANITO API SERVER
    url: 'https://api.42manito.com/'
  - description: 42 MANITO API LOCAL TEST
    url: 'http://localhost:3000'
info:
  version: 1.0.0
  title: 42-manito-api
  description: 42 manito api server
paths:
  /auth:
    get:
      summary: verify access token
      tags:
        - Auth
      security:
        - NormalUser: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthGet'
        '401':
          description: Unauthorized
  /auth/google:
    get:
      summary: Google OAuth2 (redirected to Google API)
      tags:
        - Auth
      responses:
        '301':
          description: Moved Permanently (OK)
        '302':
          description: Found (OK)
        '401':
          description: Unauthorized (API verification failed)
  /auth/google/callback:
    get:
      summary: Google OAuth2 callback (verify or create user and return token)
      tags:
        - Auth
      responses:
        '302':
          description: Redirect to front home
        '401':
          description: Unauthorized
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - NormalUser: []
      parameters:
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGet'
    post:
      summary: Create a new user
      tags:
        - Users
      security:
        - AdminUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/users/{id}':
    get:
      summary: Get a user by ID
      tags:
        - Users
      security:
        - NormalUser: []
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: User not found
    patch:
      summary: Update user
      tags:
        - Users
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateBody'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/users/{id}/reservations':
    get:
      summary: Get a user reservations by ID
      tags:
        - Users
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/IdPath'
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/RoleQuery'
        - $ref: '#/components/parameters/StatusQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReservationPagination'
        '400':
          description: Invalid request parameter id
        '404':
          description: User not found
  /mentor_profiles:
    get:
      summary: Get all mentor profiles
      tags:
        - Mentor Profiles
      security:
        - AdminUser: []
      parameters:
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/IsHideQuery'
        - $ref: '#/components/parameters/HashtagIdQuery'
        - $ref: '#/components/parameters/CategoryIdQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MentorProfilePagintaion'
  '/mentor_profiles/{id}':
    get:
      summary: Get a mentor profile by ID
      tags:
        - Mentor Profiles
      parameters:
        - $ref: '#/components/parameters/UserPath'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request parameter id
        '404':
          description: Mentor profile not found
    patch:
      summary: Update mentor profile
      description: |
        **NOTE**: **hashtags** and **categories** are replaced with the new ones  
        **NOTE**: 프로필 활성화 조건에 위배되는 경우 isHide가 해제됩니다.  
        **프로필 활성화 조건**: 해시태그와 카테고리가 1개 이상.  
      tags:
        - Mentor Profiles
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/UserPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorProfileUpdateBody'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorProfileGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/mentor_profiles/{id}/activation':
    patch:
      summary: Activate or Deactivate mentorProfiles
      description: |
        mentorProfile을 활성화/비활성화합니다.
        활성화 하기 위해선 category/hashtag가 각각 1개 이상 등록되어있어야합니다.
      tags:
        - Mentor Profiles
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/UserPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorProfileActivationBody'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorProfileGet'
        '400':
          description: |
            activation: 카테고리는 최소 1개 이상 선택해주세요.  
            activation: 해시태그는 최소 1개 이상 선택해주세요.  
        '404':
          description: |
            업데이트할 프로필이 없습니다.
  /reservations:
    get:
      summary: Get all reservations
      tags:
        - Reservations
      security:
        - AdminUser: []
      description: |
        **ROLE**\
        \
        only for `ADMIN` user
      parameters:
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/HashtagIdQuery'
        - $ref: '#/components/parameters/CategoryIdQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''
    post:
      summary: Create a new reservation
      security:
        - NormalUser: []
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreateBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists (REQUEST OR ACCEPT)
  '/reservations/{id}':
    get:
      summary: Get a reservation by ID
      tags:
        - Reservations
      security:
        - OwnerUser: []
      description: |
        **ROLE**\
        \
        only for `OWNER` user
      parameters:
        - $ref: '#/components/parameters/ReservationPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: Reservation not found
    patch:
      summary: Update reservation
      description: |
        **ROLE**\
        \
        only for `ADMIN` user
      tags:
        - Reservations
      security:
        - AdminUser: []
      parameters:
        - $ref: '#/components/parameters/ReservationPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdateBody'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/reservations/{id}/cancel':
    patch:
      summary: cancel reservation
      description: |
        **ROLE**\
        \
        only for `mentor` or `mentee` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/ReservationPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCancelBody'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/reservations/{id}/accept':
    patch:
      summary: accept reservation
      description: |
        **ROLE**\
        \
        only for `mentor` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/ReservationPath'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/reservations/{id}/check':
    patch:
      summary: check accepted reservation by mentee
      description: |
        **ROLE**\
        \
        only for `mentee` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/ReservationPath'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/reservations/{id}/mentor_completion':
    patch:
      summary: complete reservation as mentor
      description: |
        **ROLE**\
        \
        only for `mentor` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/ReservationPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCompleteMentorBody'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/reservations/{id}/mentee_completion':
    patch:
      summary: complete reservation as mentee
      description: |
        **ROLE**\
        \
        only for `mentee` user that related with reservation
      tags:
        - Reservations
      security:
        - OwnerUser: []
      parameters:
        - $ref: '#/components/parameters/ReservationPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCompleteMenteeBody'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  /hashtags:
    get:
      summary: Get all hashtags
      tags:
        - Hashtags
      parameters:
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/ProfileIdQuery'
        - $ref: '#/components/parameters/ReservationIdQuery'
        - $ref: '#/components/parameters/HashtagSearchQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashtagPagination'
    post:
      summary: Create a new hashtag
      tags:
        - Hashtags
      security:
        - NormalUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HashtagCreate'
      responses:
        '200':
          description: Already exists but I will response you
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashtagGet'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashtagGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
  /mentee_feedbacks:
    get:
      summary: Get all mentee feedbacks order by recent updated
      tags:
        - Mentee Feedbacks
      security:
        - AdminUser: []
      parameters:
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/ReservationIdQuery'
        - $ref: '#/components/parameters/MentorIdQuery'
        - $ref: '#/components/parameters/MenteeIdQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeFeedbackPagintaion'
    post:
      summary: Create a new mentee feedback
      tags:
        - Mentee Feedbacks
      security:
        - AdminUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenteeFeedbackCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeFeedbackGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/mentee_feedbacks/{id}':
    get:
      summary: Get a mentee feedback by ID
      tags:
        - Mentee Feedbacks
      security:
        - NormalUser: []
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenteeFeedbackGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: Mentee feedback not found
  /mentor_feedbacks:
    get:
      summary: Get all mentor feedbacks
      tags:
        - Mentor Feedbacks
      security:
        - AdminUser: []
      parameters:
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/ReservationIdQuery'
        - $ref: '#/components/parameters/MentorIdQuery'
        - $ref: '#/components/parameters/MenteeIdQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorFeedbackPagintaion'
    post:
      summary: Create a new mentor feedback
      tags:
        - Mentor Feedbacks
      security:
        - AdminUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorFeedbackCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorFeedbackGet'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '409':
          description: already exists
  '/mentor_feedbacks/{id}':
    get:
      summary: Get a mentor feedback by ID
      tags:
        - Mentor Feedbacks
      security:
        - NormalUser: []
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MentorFeedbackGet'
        '400':
          description: Invalid request parameter id
        '404':
          description: Mentor feedback not found
  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryGet'
  '/search/mentor/{search_string}':
    get:
      summary: Search mentor by string
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/SearchStringPath'
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
        - in: query
          name: search_by_user_nickname
          description: search by nickname `default = true`
          schema:
            default: true
            type: string
            format: true | false
        - in: query
          name: search_by_hashtag_name
          description: search by tag name `default = true`
          schema:
            default: true
            type: string
            format: true | false
        - in: query
          name: search_by_category_name
          description: search by category name `default = true`
          schema:
            default: true
            type: string
            format: true | false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HomeGet'
  /home:
    get:
      summary: Get main page mentor profiles (random)
      tags:
        - Home
      parameters:
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HomeGet'
        '404':
          description: Category not found
  '/home/{category_id}':
    get:
      summary: Get main page mentor profiles by category
      tags:
        - Home
      description: 내부 알고리즘에 의해서 선정된 상위 프로필이 제공됩니다.
      parameters:
        - $ref: '#/components/parameters/CategoryPath'
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/PageQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HomeGet'
        '404':
          description: Category not found
components:
  schemas:
    AuthGet:
      type: object
      properties:
        id:
          type: number
          description: required
        nickname:
          type: string
          description: required
        profileImage:
          type: string
          description: required
        role:
          type: string
          format: enum
          enum:
            - ADMIN
            - USER
    AuthCallbackGet:
      type: object
      properties:
        uid:
          type: integer
          description: user id
        accessToken:
          type: string
          description: required
    CategoryGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    Page:
      type: object
      properties:
        take:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        totalPage:
          type: integer
          format: int32
        currentPage:
          type: integer
          format: int32
        isLast:
          type: boolean
    HashtagId:
      type: object
      properties:
        id:
          type: integer
          format: int32
    HashtagGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    HashtagPagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/HashtagGet'
        page:
          $ref: '#/components/schemas/Page'
      example:
        content:
          - id: 0
            name: test1
          - id: 1
            name: test2
        page:
          take: 0
          page: 0
          totalPage: 0
          currentPage: 0
          isLast: false
    HashtagCreate:
      type: object
      properties:
        name:
          type: string
          description: 'required, 0 < len < 20'
      required:
        - name
    HomeGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        shortDescription:
          type: string
        description:
          type: string
        isHide:
          type: boolean
        mentoringCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryGet'
        user:
          $ref: '#/components/schemas/HomeSimpleUser'
    HomeSimpleUser:
      type: object
      properties:
        id:
          type: integer
          format: int32
        nickname:
          type: string
        profileImage:
          type: string
    MenteeFeedbackGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        menteeId:
          type: integer
          format: int32
        mentorId:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32
        rating:
          type: number
          format: float
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MenteeFeedbackCreate:
      type: object
      properties:
        menteeId:
          type: integer
          format: int32
          description: 'required, mentee id'
        mentorId:
          type: integer
          format: int32
          description: 'required, mentor id'
        reservationId:
          type: integer
          format: int32
          description: 'required, reservation id'
        rating:
          type: number
          format: float
          description: 'required, 0 <= rating <= 5'
        content:
          type: string
          description: 'optional, 0 < len < 1000'
      required:
        - menteeId
        - mentorId
        - reservationId
        - rating
    MenteeFeedbackPagintaion:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/MenteeFeedbackGet'
        page:
          $ref: '#/components/schemas/Page'
    MentorFeedbackGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        menteeId:
          type: integer
          format: int32
        mentorId:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32
        rating:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MentorFeedbackCreate:
      type: object
      properties:
        menteeId:
          type: integer
          format: int32
          description: 'required, mentee id'
        mentorId:
          type: integer
          format: int32
          description: 'required, mentor id'
        reservationId:
          type: integer
          format: int32
          description: 'required, reservation id'
        rating:
          type: number
          format: float
          description: 'required, 0 <= rating <= 5'
        content:
          type: string
          description: 'optional, 0 < len < 1000'
      required:
        - menteeId
        - mentorId
        - reservationId
        - rating
    MentorFeedbackPagintaion:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/MentorFeedbackGet'
        page:
          $ref: '#/components/schemas/Page'
    MentorProfileGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        shortDescription:
          type: string
        description:
          type: string
        isHide:
          type: boolean
        mentoringCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryGet'
        user:
          type: object
          properties:
            id:
              type: integer
              format: int32
            nickname:
              type: string
            profileImage:
              type: string
        socialLink:
          type: string
    MentorProfileCreate:
      type: object
      properties:
        userId:
          type: integer
          format: int32
          description: 'required, user id'
    MentorProfilePagintaion:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/MentorProfileGet'
        page:
          $ref: '#/components/schemas/Page'
    MentorProfileSimpleGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        shortDescription:
          type: string
        description:
          type: string
        isHide:
          type: boolean
        mentoringCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryGet'
        socialLink:
          type: string
    ReservationGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: reservation id
        mentorId:
          type: integer
          format: int32
        menteeId:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/CategoryGet'
        requestMessage:
          type: string
        status:
          type: string
          format: enum
          enum:
            - REQUEST
            - ACCEPT
            - CANCEL
            - PENDING
            - COMPLETE
        mentorFeedback:
          $ref: '#/components/schemas/MentorFeedbackGet'
        menteeFeedback:
          $ref: '#/components/schemas/MenteeFeedbackGet'
        cancelReason:
          $ref: '#/components/schemas/ReservationCancelReason'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hashtags:
          type: array
          items:
            $ref: '#/components/schemas/HashtagGet'
    ReservationCancelReason:
      type: object
      properties:
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        requestedUserId:
          type: integer
          format: int32
        reservationId:
          type: integer
          format: int32
    ReservationPagintaion:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/ReservationGet'
        page:
          $ref: '#/components/schemas/Page'
    UserGet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
        nickname:
          type: string
        profileImage:
          type: string
        role:
          description: required
          type: string
          format: enum
          enum:
            - ADMIN
            - USER
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        mentorProfile:
          $ref: '#/components/schemas/MentorProfileSimpleGet'
    UserCreate:
      type: object
      description: only for admin
      properties:
        email:
          type: string
          format: email
          description: required
        nickname:
          type: string
          description: required
        profileImage:
          type: string
          description: required
        role:
          description: required
          type: string
          format: enum
          enum:
            - ADMIN
            - USER
    UserReservationPagination:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/ReservationGet'
        page:
          $ref: '#/components/schemas/Page'
    HashtagUpdateBody:
      type: object
      properties:
        id:
          type: integer
          format: int32
      required:
        - id
    MentorProfileUpdateBody:
      type: object
      properties:
        isHide:
          type: boolean
          description: default false
        shortDescription:
          type: string
          description: 0 <= len < 50
        description:
          type: string
          description: 0 <= len < 1000
        hashtags:
          type: array
          description: number of hashtag <= 5
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
        categories:
          type: array
          description: optional
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
        socialLink:
          type: string
          description: 'optional, regex https://42born2code.slack.com/team/[a-zA-Z0-9_]+'
    MentorProfileActivationBody:
      type: object
      properties:
        isHide:
          type: boolean
    ReservationCancelBody:
      type: object
      properties:
        content:
          description: 'Reason for Cancellation, (length <= 100)'
          type: string
    ReservationCreateBody:
      type: object
      properties:
        mentorId:
          type: integer
          format: int32
          description: 'required, mentor id'
        menteeId:
          type: integer
          format: int32
          description: 'required, mentee id'
        categoryId:
          type: integer
          format: int32
          description: 'required, category id'
        requestMessage:
          type: string
          description: 'optional, request message `length <= 1000`'
        hashtags:
          type: array
          description: number of hashtag <= 5
          items:
            $ref: '#/components/schemas/HashtagId'
      required:
        - mentorId
        - menteeId
    ReservationUpdateBody:
      type: object
      properties:
        requestMessage:
          type: string
          description: 'optional, request message'
        status:
          description: 'optional, status'
          type: string
          format: enum
          enum:
            - REQUESTED
            - ACCEPTED
            - FINISHED
            - CANCELED
        categoryId:
          type: integer
          format: int32
          description: 'optional, category id'
        hashtags:
          type: array
          description: 'optional, hashtags item max 5'
          items:
            $ref: '#/components/schemas/HashtagUpdateBody'
    ReservationCompleteMenteeBody:
      type: object
      properties:
        rating:
          type: number
          description: 'rating, 0.5 * n, (0 <= n < 10) '
        content:
          description: 'reservation feedback, (length <= 300)'
          type: string
    ReservationCompleteMentorBody:
      type: object
      properties:
        rating:
          type: number
          description: 'rating, 0.5 * n, (0 <= n < 10) '
    UsersCreateBody:
      type: object
      description: only for admin
      properties:
        email:
          type: string
          format: email
          description: required
        nickname:
          type: string
          description: required
        profileImage:
          type: string
          description: required
        role:
          description: required
          type: string
          format: enum
          enum:
            - ADMIN
            - USER
    UsersUpdateBody:
      type: object
      properties:
        profileImage:
          type: string
          description: optional
  parameters:
    CategoryPath:
      in: path
      name: category_id
      required: true
      description: category id
      schema:
        type: integer
    IdPath:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int32
    ReservationPath:
      name: id
      in: path
      required: true
      description: reservation id
      schema:
        type: integer
        format: int32
    SearchStringPath:
      in: path
      name: search_string
      required: true
      description: search mentor profiles that contains search string in nickname or hashtags
      schema:
        type: string
    UserPath:
      name: id
      in: path
      required: true
      description: user id
      schema:
        type: integer
        format: int32
    CategoryIdQuery:
      in: query
      name: category_id
      description: filter by category
      schema:
        type: integer
        format: int32
    HashtagIdQuery:
      in: query
      name: hashtag_id
      description: filter by hashtag
      schema:
        type: integer
        format: int32
    HashtagSearchQuery:
      in: query
      name: search
      description: search by hashtag (%LIKE%)
      schema:
        type: string
    IsHideQuery:
      in: query
      name: is_hide
      description: filter by is_hide
      schema:
        type: boolean
    MenteeIdQuery:
      in: query
      name: mentee_id
      description: filter by mentee_id
      schema:
        type: integer
        format: int32
    MentorIdQuery:
      in: query
      name: mentor_id
      description: filter by mentor_id
      schema:
        type: integer
        format: int32
    PageQuery:
      in: query
      name: page
      description: page to skip (>= 0)
      schema:
        default: 0
        type: integer
        format: int32
    TakeQuery:
      in: query
      name: take
      description: 'take `take` per page (min = 1, max = 100, default = 20)'
      schema:
        default: 20
        type: integer
        format: int32
    ProfileIdQuery:
      in: query
      name: profile_id
      description: filter by profile_id
      schema:
        type: integer
        format: int32
    ReservationIdQuery:
      in: query
      name: reservation_id
      description: filter by reservation_id
      schema:
        type: integer
        format: int32
    RoleQuery:
      in: query
      name: role
      required: false
      description: find matched role reservations (ALL is find ALL)
      schema:
        default: ALL
        enum:
          - MENTOR
          - MENTEE
          - ALL
    StatusQuery:
      in: query
      name: status
      description: find matched status reservations
      schema:
        type: array
        default:
          - REQUEST
          - ACCEPT
          - MENTEE_CHECKED
          - MENTEE_FEEDBACK
          - DONE
          - CANCEL
        items:
          enum:
            - REQUEST
            - ACCEPT
            - MENTEE_CHECKED
            - MENTEE_FEEDBACK
            - DONE
            - CANCEL
          minItems: 1
          maxItems: 6
      style: matrix
      explode: false
  securitySchemes:
    NormalUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: User Role >= USER
    OwnerUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: User Role >= ResourceOwner
    AdminUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: User Role >= ADMIN
