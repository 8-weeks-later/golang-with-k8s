// Package ApiDocs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package ApiDocs

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AdminUserScopes  = "AdminUser.Scopes"
	NormalUserScopes = "NormalUser.Scopes"
	OwnerUserScopes  = "OwnerUser.Scopes"
)

// Defines values for AuthGetRole.
const (
	AuthGetRoleADMIN AuthGetRole = "ADMIN"

	AuthGetRoleUSER AuthGetRole = "USER"
)

// Defines values for ReservationGetStatus.
const (
	ReservationGetStatusACCEPT ReservationGetStatus = "ACCEPT"

	ReservationGetStatusCANCEL ReservationGetStatus = "CANCEL"

	ReservationGetStatusCOMPLETE ReservationGetStatus = "COMPLETE"

	ReservationGetStatusPENDING ReservationGetStatus = "PENDING"

	ReservationGetStatusREQUEST ReservationGetStatus = "REQUEST"
)

// Defines values for ReservationUpdateStatus.
const (
	ReservationUpdateStatusACCEPTED ReservationUpdateStatus = "ACCEPTED"

	ReservationUpdateStatusCANCELED ReservationUpdateStatus = "CANCELED"

	ReservationUpdateStatusFINISHED ReservationUpdateStatus = "FINISHED"

	ReservationUpdateStatusREQUESTED ReservationUpdateStatus = "REQUESTED"
)

// Defines values for UserCreateRole.
const (
	UserCreateRoleADMIN UserCreateRole = "ADMIN"

	UserCreateRoleUSER UserCreateRole = "USER"
)

// Defines values for UsersGetRole.
const (
	UsersGetRoleADMIN UsersGetRole = "ADMIN"

	UsersGetRoleUSER UsersGetRole = "USER"
)

// AuthGet defines model for AuthGet.
type AuthGet struct {
	// required
	Id *float32 `json:"id,omitempty"`

	// required
	Nickname *string `json:"nickname,omitempty"`

	// required
	ProfileImage *string      `json:"profileImage,omitempty"`
	Role         *AuthGetRole `json:"role,omitempty"`
}

// AuthGetRole defines model for AuthGet.Role.
type AuthGetRole string

// CancelReasonGet defines model for CancelReasonGet.
type CancelReasonGet struct {
	Content         *string    `json:"content,omitempty"`
	CreatedAt       *time.Time `json:"createdAt,omitempty"`
	RequestedUserId *int32     `json:"requestedUserId,omitempty"`
	ReservationId   *int32     `json:"reservationId,omitempty"`
}

// CancelReservation defines model for CancelReservation.
type CancelReservation struct {
	// Reason for Cancellation, (length <= 100)
	Content *string `json:"content,omitempty"`
}

// CategoryGet defines model for CategoryGet.
type CategoryGet struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// CompleteReservationAsMentee defines model for CompleteReservationAsMentee.
type CompleteReservationAsMentee struct {
	// reservation feedback, (length <= 300)
	Content *string `json:"content,omitempty"`

	// rating, 0.5 * n, (0 <= n < 10)
	Rating *float32 `json:"rating,omitempty"`
}

// CompleteReservationAsMentor defines model for CompleteReservationAsMentor.
type CompleteReservationAsMentor struct {
	// rating, 0.5 * n, (0 <= n < 10)
	Rating *float32 `json:"rating,omitempty"`
}

// Hashtag defines model for Hashtag.
type Hashtag struct {
	ProfileHashtag     *[]ProfileHashtag     `json:"ProfileHashtag,omitempty"`
	ReservationHashtag *[]ReservationHashtag `json:"ReservationHashtag,omitempty"`
	Id                 *int32                `json:"id,omitempty"`
	Name               *string               `json:"name,omitempty"`
	Profiles           *[]MenteeFeedback     `json:"profiles,omitempty"`
	Reservations       *[]Reservation        `json:"reservations,omitempty"`
}

// HashtagCreate defines model for HashtagCreate.
type HashtagCreate struct {
	// required, 0 < len < 20
	Name string `json:"name"`
}

// HashtagGet defines model for HashtagGet.
type HashtagGet struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// HashtagId defines model for HashtagId.
type HashtagId struct {
	Id *int32 `json:"id,omitempty"`
}

// HashtagPagination defines model for HashtagPagination.
type HashtagPagination struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// HashtagUpdate defines model for HashtagUpdate.
type HashtagUpdate struct {
	Id int32 `json:"id"`
}

// HomeGet defines model for HomeGet.
type HomeGet struct {
	Categories       *[]CategoryGet `json:"categories,omitempty"`
	CreatedAt        *time.Time     `json:"createdAt,omitempty"`
	Description      *string        `json:"description,omitempty"`
	Hashtags         *[]HashtagGet  `json:"hashtags,omitempty"`
	Id               *int32         `json:"id,omitempty"`
	IsHide           *bool          `json:"isHide,omitempty"`
	MentoringCount   *int           `json:"mentoringCount,omitempty"`
	ShortDescription *string        `json:"shortDescription,omitempty"`
	UpdatedAt        *time.Time     `json:"updatedAt,omitempty"`
	User             *UserSimpleGet `json:"user,omitempty"`
}

// MenteeFeedback defines model for MenteeFeedback.
type MenteeFeedback struct {
	Hashtag       *Hashtag     `json:"Hashtag,omitempty"`
	Content       *string      `json:"content,omitempty"`
	CreatedAt     *time.Time   `json:"createdAt,omitempty"`
	HashtagId     *int32       `json:"hashtagId,omitempty"`
	Id            *int32       `json:"id,omitempty"`
	Mentee        *User        `json:"mentee,omitempty"`
	MenteeId      *int32       `json:"menteeId,omitempty"`
	Mentor        *User        `json:"mentor,omitempty"`
	MentorId      *int32       `json:"mentorId,omitempty"`
	Rating        *float32     `json:"rating,omitempty"`
	Reservation   *Reservation `json:"reservation,omitempty"`
	ReservationId *int32       `json:"reservationId,omitempty"`
	UpdatedAt     *time.Time   `json:"updatedAt,omitempty"`
}

// MenteeFeedbackCreate defines model for MenteeFeedbackCreate.
type MenteeFeedbackCreate struct {
	// optional, 0 < len < 1000
	Content *string `json:"content,omitempty"`

	// required, mentee id
	MenteeId int32 `json:"menteeId"`

	// required, mentor id
	MentorId int32 `json:"mentorId"`

	// required, 0 <= rating <= 5
	Rating float32 `json:"rating"`

	// required, reservation id
	ReservationId int32 `json:"reservationId"`
}

// MenteeFeedbackGet defines model for MenteeFeedbackGet.
type MenteeFeedbackGet struct {
	Content       *string    `json:"content,omitempty"`
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Id            *int32     `json:"id,omitempty"`
	MenteeId      *int32     `json:"menteeId,omitempty"`
	MentorId      *int32     `json:"mentorId,omitempty"`
	Rating        *float32   `json:"rating,omitempty"`
	ReservationId *int32     `json:"reservationId,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
}

// MenteeFeedbackPagination defines model for MenteeFeedbackPagination.
type MenteeFeedbackPagination struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// MentorFeedback defines model for MentorFeedback.
type MentorFeedback struct {
	CreatedAt     *time.Time   `json:"createdAt,omitempty"`
	Id            *int32       `json:"id,omitempty"`
	Mentee        *User        `json:"mentee,omitempty"`
	MenteeId      *int32       `json:"menteeId,omitempty"`
	Mentor        *User        `json:"mentor,omitempty"`
	MentorId      *int32       `json:"mentorId,omitempty"`
	Rating        *float32     `json:"rating,omitempty"`
	Reservation   *Reservation `json:"reservation,omitempty"`
	ReservationId *int32       `json:"reservationId,omitempty"`
	UpdatedAt     *time.Time   `json:"updatedAt,omitempty"`
}

// MentorFeedbackCreate defines model for MentorFeedbackCreate.
type MentorFeedbackCreate struct {
	// optional, 0 < len < 1000
	Content *string `json:"content,omitempty"`

	// required, mentee id
	MenteeId int32 `json:"menteeId"`

	// required, mentor id
	MentorId int32 `json:"mentorId"`

	// required, 0 <= rating <= 5
	Rating float32 `json:"rating"`

	// required, reservation id
	ReservationId int32 `json:"reservationId"`
}

// MentorFeedbackGet defines model for MentorFeedbackGet.
type MentorFeedbackGet struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Id            *int32     `json:"id,omitempty"`
	MenteeId      *int32     `json:"menteeId,omitempty"`
	MentorId      *int32     `json:"mentorId,omitempty"`
	Rating        *float32   `json:"rating,omitempty"`
	ReservationId *int32     `json:"reservationId,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
}

// MentorFeedbackPagination defines model for MentorFeedbackPagination.
type MentorFeedbackPagination struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// MentorProfile defines model for MentorProfile.
type MentorProfile struct {
	Description      *string           `json:"description,omitempty"`
	Hashtags         *[]ProfileHashtag `json:"hashtags,omitempty"`
	Id               *int32            `json:"id,omitempty"`
	ShortDescription *string           `json:"shortDescription,omitempty"`
	User             *User             `json:"user,omitempty"`
	UserId           *int32            `json:"userId,omitempty"`
}

// MentorProfileActivation defines model for MentorProfileActivation.
type MentorProfileActivation struct {
	IsHide *bool `json:"isHide,omitempty"`
}

// MentorProfileGet defines model for MentorProfileGet.
type MentorProfileGet struct {
	Categories       *[]CategoryGet `json:"categories,omitempty"`
	CreatedAt        *time.Time     `json:"createdAt,omitempty"`
	Description      *string        `json:"description,omitempty"`
	Hashtags         *[]HashtagGet  `json:"hashtags,omitempty"`
	Id               *int32         `json:"id,omitempty"`
	IsHide           *bool          `json:"isHide,omitempty"`
	MentoringCount   *int           `json:"mentoringCount,omitempty"`
	ShortDescription *string        `json:"shortDescription,omitempty"`
	SocialLink       *string        `json:"socialLink,omitempty"`
	UpdatedAt        *time.Time     `json:"updatedAt,omitempty"`
	User             *struct {
		Id           *int32  `json:"id,omitempty"`
		Nickname     *string `json:"nickname,omitempty"`
		ProfileImage *string `json:"profileImage,omitempty"`
	} `json:"user,omitempty"`
	UserId *int32 `json:"userId,omitempty"`
}

// MentorProfilePagination defines model for MentorProfilePagination.
type MentorProfilePagination struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// MentorProfileSimpleGet defines model for MentorProfileSimpleGet.
type MentorProfileSimpleGet struct {
	Categories       *[]CategoryGet `json:"categories,omitempty"`
	CreatedAt        *time.Time     `json:"createdAt,omitempty"`
	Description      *string        `json:"description,omitempty"`
	Hashtags         *[]HashtagGet  `json:"hashtags,omitempty"`
	Id               *int32         `json:"id,omitempty"`
	IsHide           *bool          `json:"isHide,omitempty"`
	MentoringCount   *int           `json:"mentoringCount,omitempty"`
	ShortDescription *string        `json:"shortDescription,omitempty"`
	SocialLink       *string        `json:"socialLink,omitempty"`
	UpdatedAt        *time.Time     `json:"updatedAt,omitempty"`
}

// MentorProfileUpdate defines model for MentorProfileUpdate.
type MentorProfileUpdate struct {
	// optional
	Categories *[]struct {
		Id *int32 `json:"id,omitempty"`
	} `json:"categories,omitempty"`

	// 0 <= len < 1000
	Description *string `json:"description,omitempty"`

	// number of hashtag <= 5
	Hashtags *[]struct {
		Id *int32 `json:"id,omitempty"`
	} `json:"hashtags,omitempty"`

	// default false
	IsHide *bool `json:"isHide,omitempty"`

	// 0 <= len < 50
	ShortDescription *string `json:"shortDescription,omitempty"`

	// optional, regex https://42born2code.slack.com/team/[a-zA-Z0-9_]+
	SocialLink *string `json:"socialLink,omitempty"`
}

// Page defines model for Page.
type Page struct {
	CurrentPage *int32 `json:"currentPage,omitempty"`
	IsLast      *bool  `json:"isLast,omitempty"`
	Page        *int32 `json:"page,omitempty"`
	Take        *int32 `json:"take,omitempty"`
	TotalPage   *int32 `json:"totalPage,omitempty"`
}

// ProfileHashtag defines model for ProfileHashtag.
type ProfileHashtag struct {
	Hashtag   *Hashtag       `json:"hashtag,omitempty"`
	HashtagId *int32         `json:"hashtagId,omitempty"`
	Profile   *MentorProfile `json:"profile,omitempty"`
	ProfileId *int32         `json:"profileId,omitempty"`
}

// Reservation defines model for Reservation.
type Reservation struct {
	Hashtag        *Hashtag              `json:"Hashtag,omitempty"`
	CreatedAt      *time.Time            `json:"createdAt,omitempty"`
	HashtagId      *int32                `json:"hashtagId,omitempty"`
	Hashtags       *[]ReservationHashtag `json:"hashtags,omitempty"`
	Id             *int32                `json:"id,omitempty"`
	IsAccepted     *bool                 `json:"isAccepted,omitempty"`
	IsFinished     *bool                 `json:"isFinished,omitempty"`
	MenTeeFeedback *[]MenteeFeedback     `json:"menTeeFeedback,omitempty"`
	Mentee         *User                 `json:"mentee,omitempty"`
	MenteeId       *int32                `json:"menteeId,omitempty"`
	Mentor         *User                 `json:"mentor,omitempty"`
	MentorFeedback *[]MentorFeedback     `json:"mentorFeedback,omitempty"`
	MentorId       *int32                `json:"mentorId,omitempty"`
	RequestMessage *string               `json:"requestMessage,omitempty"`
	UpdatedAt      *time.Time            `json:"updatedAt,omitempty"`
}

// ReservationCreate defines model for ReservationCreate.
type ReservationCreate struct {
	// required, category id
	CategoryId *int32 `json:"categoryId,omitempty"`

	// number of hashtag <= 5
	Hashtags *[]HashtagId `json:"hashtags,omitempty"`

	// required, mentee id
	MenteeId int32 `json:"menteeId"`

	// required, mentor id
	MentorId int32 `json:"mentorId"`

	// optional, request message `length <= 1000`
	RequestMessage *string `json:"requestMessage,omitempty"`
}

// ReservationGet defines model for ReservationGet.
type ReservationGet struct {
	CancelReason *CancelReasonGet `json:"cancelReason,omitempty"`
	Category     *CategoryGet     `json:"category,omitempty"`
	CreatedAt    *time.Time       `json:"createdAt,omitempty"`
	Hashtags     *[]HashtagGet    `json:"hashtags,omitempty"`

	// reservation id
	Id             *int32                `json:"id,omitempty"`
	MenteeFeedback *MenteeFeedbackGet    `json:"menteeFeedback,omitempty"`
	MenteeId       *int32                `json:"menteeId,omitempty"`
	MentorFeedback *MentorFeedbackGet    `json:"mentorFeedback,omitempty"`
	MentorId       *int32                `json:"mentorId,omitempty"`
	RequestMessage *string               `json:"requestMessage,omitempty"`
	Status         *ReservationGetStatus `json:"status,omitempty"`
	UpdatedAt      *time.Time            `json:"updatedAt,omitempty"`
}

// ReservationGetStatus defines model for ReservationGet.Status.
type ReservationGetStatus string

// ReservationHashtag defines model for ReservationHashtag.
type ReservationHashtag struct {
	Hashtag       *Hashtag     `json:"hashtag,omitempty"`
	HashtagId     *int32       `json:"hashtagId,omitempty"`
	Reservation   *Reservation `json:"reservation,omitempty"`
	ReservationId *int32       `json:"reservationId,omitempty"`
}

// ReservationPagination defines model for ReservationPagination.
type ReservationPagination struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// ReservationUpdate defines model for ReservationUpdate.
type ReservationUpdate struct {
	// optional, category id
	CategoryId *int32 `json:"categoryId,omitempty"`

	// optional, hashtags item max 5
	Hashtags *[]HashtagUpdate `json:"hashtags,omitempty"`

	// optional, request message
	RequestMessage *string `json:"requestMessage,omitempty"`

	// optional, status
	Status *ReservationUpdateStatus `json:"status,omitempty"`
}

// optional, status
type ReservationUpdateStatus string

// SearchMentorGet defines model for SearchMentorGet.
type SearchMentorGet HomeGet

// User defines model for User.
type User struct {
	CreatedAt           *time.Time        `json:"createdAt,omitempty"`
	Email               *string           `json:"email,omitempty"`
	Id                  *int32            `json:"id,omitempty"`
	MenteeFeedbacksFrom *[]MentorFeedback `json:"menteeFeedbacksFrom,omitempty"`
	MenteeFeedbacksTo   *[]MenteeFeedback `json:"menteeFeedbacksTo,omitempty"`
	MenteeReservations  *[]Reservation    `json:"menteeReservations,omitempty"`
	MentorFeedbacksFrom *[]MenteeFeedback `json:"mentorFeedbacksFrom,omitempty"`
	MentorFeedbacksTo   *[]MentorFeedback `json:"mentorFeedbacksTo,omitempty"`
	MentorProfile       *MentorProfile    `json:"mentorProfile,omitempty"`
	MentorReservations  *[]Reservation    `json:"mentorReservations,omitempty"`
	Nickname            *string           `json:"nickname,omitempty"`
	ProfileImage        *string           `json:"profileImage,omitempty"`
	UpdatedAt           *time.Time        `json:"updatedAt,omitempty"`
}

// only for admin
type UserCreate struct {
	// required
	Email *openapi_types.Email `json:"email,omitempty"`

	// required
	Nickname *string `json:"nickname,omitempty"`

	// required
	ProfileImage *string `json:"profileImage,omitempty"`

	// required
	Role *UserCreateRole `json:"role,omitempty"`
}

// required
type UserCreateRole string

// UserSimpleGet defines model for UserSimpleGet.
type UserSimpleGet struct {
	Id           *int32  `json:"id,omitempty"`
	Nickname     *string `json:"nickname,omitempty"`
	ProfileImage *string `json:"profileImage,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	// optional
	ProfileImage *string `json:"profileImage,omitempty"`
}

// UsersGet defines model for UsersGet.
type UsersGet struct {
	CreatedAt     *time.Time              `json:"createdAt,omitempty"`
	Email         *openapi_types.Email    `json:"email,omitempty"`
	Id            *int32                  `json:"id,omitempty"`
	MentorProfile *MentorProfileSimpleGet `json:"mentorProfile,omitempty"`
	Nickname      *string                 `json:"nickname,omitempty"`
	ProfileImage  *string                 `json:"profileImage,omitempty"`

	// required
	Role      *UsersGetRole `json:"role,omitempty"`
	UpdatedAt *time.Time    `json:"updatedAt,omitempty"`
}

// required
type UsersGetRole string

// UsersReservationsPagination defines model for UsersReservationsPagination.
type UsersReservationsPagination struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// GetHashtagsParams defines parameters for GetHashtags.
type GetHashtagsParams struct {
	// take `take` Users (min = 1, max = 100, default = 20)
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users (>= 0)
	Page *int32 `json:"page,omitempty"`

	// filter by profile_id
	ProfileId *int32 `json:"profile_id,omitempty"`

	// filter by reservation_id
	ReservationId *int32 `json:"reservation_id,omitempty"`

	// search by hashtag (%LIKE%)
	Search *string `json:"search,omitempty"`
}

// PostHashtagsJSONBody defines parameters for PostHashtags.
type PostHashtagsJSONBody HashtagCreate

// GetHomeParams defines parameters for GetHome.
type GetHomeParams struct {
	// take `take` Users `min = 1, max = 100, default = 20`
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users `take >= 0`
	Page *int32 `json:"page,omitempty"`
}

// GetHomeCategoryIdParams defines parameters for GetHomeCategoryId.
type GetHomeCategoryIdParams struct {
	// take `take` Users `min = 1, max = 100, default = 20`
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users `take >= 0`
	Page *int32 `json:"page,omitempty"`
}

// GetMenteeFeedbacksParams defines parameters for GetMenteeFeedbacks.
type GetMenteeFeedbacksParams struct {
	// take `take` Users (min = 1, max = 100, default = 20)
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users (>= 0)
	Page *int32 `json:"page,omitempty"`

	// filter by mentee_id
	MenteeId *int32 `json:"mentee_id,omitempty"`

	// filter by mentor_id
	MentorId *int32 `json:"mentor_id,omitempty"`

	// filter by reservation_id
	ReservationId *int32 `json:"reservation_id,omitempty"`
}

// PostMenteeFeedbacksJSONBody defines parameters for PostMenteeFeedbacks.
type PostMenteeFeedbacksJSONBody MenteeFeedbackCreate

// GetMentorFeedbacksParams defines parameters for GetMentorFeedbacks.
type GetMentorFeedbacksParams struct {
	// take `take` Users (min = 1, max = 100, default = 20)
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users (>= 0)
	Page *int32 `json:"page,omitempty"`

	// filter by mentee_id
	MenteeId *int32 `json:"mentee_id,omitempty"`

	// filter by mentor_id
	MentorId *int32 `json:"mentor_id,omitempty"`

	// filter by reservation_id
	ReservationId *int32 `json:"reservation_id,omitempty"`
}

// PostMentorFeedbacksJSONBody defines parameters for PostMentorFeedbacks.
type PostMentorFeedbacksJSONBody MentorFeedbackCreate

// GetMentorProfilesParams defines parameters for GetMentorProfiles.
type GetMentorProfilesParams struct {
	// take `take` Users (min = 1, max = 100, default = 20)
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users (>= 0)
	Page *int32 `json:"page,omitempty"`

	// filter by is_hide
	IsHide *bool `json:"is_hide,omitempty"`

	// filter by hashtag
	HashtagId *int32 `json:"hashtag_id,omitempty"`

	// filter by category
	CategoryId *int32 `json:"category_id,omitempty"`
}

// PatchMentorProfilesIdJSONBody defines parameters for PatchMentorProfilesId.
type PatchMentorProfilesIdJSONBody MentorProfileUpdate

// PatchMentorProfilesIdActivationJSONBody defines parameters for PatchMentorProfilesIdActivation.
type PatchMentorProfilesIdActivationJSONBody MentorProfileActivation

// GetReservationsParams defines parameters for GetReservations.
type GetReservationsParams struct {
	// take `take` Users (min = 1, max = 100, default = 20)
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users (>= 0)
	Page *int32 `json:"page,omitempty"`

	// filter by hashtag
	HashtagId *int32 `json:"hashtag_id,omitempty"`

	// filter by category
	CategoryId *int32 `json:"category_id,omitempty"`
}

// PostReservationsJSONBody defines parameters for PostReservations.
type PostReservationsJSONBody ReservationCreate

// PatchReservationsIdJSONBody defines parameters for PatchReservationsId.
type PatchReservationsIdJSONBody ReservationUpdate

// PatchReservationsIdCancelJSONBody defines parameters for PatchReservationsIdCancel.
type PatchReservationsIdCancelJSONBody CancelReservation

// PatchReservationsIdMenteeCompletionJSONBody defines parameters for PatchReservationsIdMenteeCompletion.
type PatchReservationsIdMenteeCompletionJSONBody CompleteReservationAsMentee

// PatchReservationsIdMentorCompletionJSONBody defines parameters for PatchReservationsIdMentorCompletion.
type PatchReservationsIdMentorCompletionJSONBody CompleteReservationAsMentor

// GetSearchMentorSearchStringParams defines parameters for GetSearchMentorSearchString.
type GetSearchMentorSearchStringParams struct {
	// take `take` Users `min = 1, max = 100, default = 20`
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users `take >= 0`
	Page *int32 `json:"page,omitempty"`

	// search by nickname `default = true`
	SearchByUserNickname *string `json:"search_by_user_nickname,omitempty"`

	// search by tag name `default = true`
	SearchByHashtagName *string `json:"search_by_hashtag_name,omitempty"`

	// search by category name `default = true`
	SearchByCategoryName *string `json:"search_by_category_name,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// take `take` Users (`min = 1, max = 100, default = 20`)
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users (`skip >= 0`)
	Page *int32 `json:"page,omitempty"`
}

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody UserCreate

// PatchUsersIdJSONBody defines parameters for PatchUsersId.
type PatchUsersIdJSONBody UserUpdate

// GetUsersIdReservationsParams defines parameters for GetUsersIdReservations.
type GetUsersIdReservationsParams struct {
	// take `take` Users (`min = 1, max = 100, default = 20`)
	Take *int32 `json:"take,omitempty"`

	// skip `take * page` Users and take `take` Users (`skip >= 0`)
	Page *string `json:"page,omitempty"`

	// find matched role reservations (ALL is find ALL)
	Role *interface{} `json:"role,omitempty"`

	// find matched status reservations
	Status *[]interface{} `json:"status,omitempty"`
}

// PostHashtagsJSONRequestBody defines body for PostHashtags for application/json ContentType.
type PostHashtagsJSONRequestBody PostHashtagsJSONBody

// PostMenteeFeedbacksJSONRequestBody defines body for PostMenteeFeedbacks for application/json ContentType.
type PostMenteeFeedbacksJSONRequestBody PostMenteeFeedbacksJSONBody

// PostMentorFeedbacksJSONRequestBody defines body for PostMentorFeedbacks for application/json ContentType.
type PostMentorFeedbacksJSONRequestBody PostMentorFeedbacksJSONBody

// PatchMentorProfilesIdJSONRequestBody defines body for PatchMentorProfilesId for application/json ContentType.
type PatchMentorProfilesIdJSONRequestBody PatchMentorProfilesIdJSONBody

// PatchMentorProfilesIdActivationJSONRequestBody defines body for PatchMentorProfilesIdActivation for application/json ContentType.
type PatchMentorProfilesIdActivationJSONRequestBody PatchMentorProfilesIdActivationJSONBody

// PostReservationsJSONRequestBody defines body for PostReservations for application/json ContentType.
type PostReservationsJSONRequestBody PostReservationsJSONBody

// PatchReservationsIdJSONRequestBody defines body for PatchReservationsId for application/json ContentType.
type PatchReservationsIdJSONRequestBody PatchReservationsIdJSONBody

// PatchReservationsIdCancelJSONRequestBody defines body for PatchReservationsIdCancel for application/json ContentType.
type PatchReservationsIdCancelJSONRequestBody PatchReservationsIdCancelJSONBody

// PatchReservationsIdMenteeCompletionJSONRequestBody defines body for PatchReservationsIdMenteeCompletion for application/json ContentType.
type PatchReservationsIdMenteeCompletionJSONRequestBody PatchReservationsIdMenteeCompletionJSONBody

// PatchReservationsIdMentorCompletionJSONRequestBody defines body for PatchReservationsIdMentorCompletion for application/json ContentType.
type PatchReservationsIdMentorCompletionJSONRequestBody PatchReservationsIdMentorCompletionJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PatchUsersIdJSONRequestBody defines body for PatchUsersId for application/json ContentType.
type PatchUsersIdJSONRequestBody PatchUsersIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuth request
	GetAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuth42 request
	GetAuth42(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuth42Callback request
	GetAuth42Callback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategories request
	GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHashtags request
	GetHashtags(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHashtags request with any body
	PostHashtagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHashtags(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHome request
	GetHome(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHomeCategoryId request
	GetHomeCategoryId(ctx context.Context, categoryId int, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMenteeFeedbacks request
	GetMenteeFeedbacks(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMenteeFeedbacks request with any body
	PostMenteeFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMenteeFeedbacks(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMenteeFeedbacksId request
	GetMenteeFeedbacksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorFeedbacks request
	GetMentorFeedbacks(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMentorFeedbacks request with any body
	PostMentorFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMentorFeedbacks(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorFeedbacksId request
	GetMentorFeedbacksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorProfiles request
	GetMentorProfiles(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorProfilesId request
	GetMentorProfilesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMentorProfilesId request with any body
	PatchMentorProfilesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMentorProfilesId(ctx context.Context, id int32, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMentorProfilesIdActivation request with any body
	PatchMentorProfilesIdActivationWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMentorProfilesIdActivation(ctx context.Context, id int32, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReservations request
	GetReservations(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReservations request with any body
	PostReservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReservations(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReservationsId request
	GetReservationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsId request with any body
	PatchReservationsIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsId(ctx context.Context, id int32, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdAccept request
	PatchReservationsIdAccept(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdCancel request with any body
	PatchReservationsIdCancelWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsIdCancel(ctx context.Context, id int32, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdCheck request
	PatchReservationsIdCheck(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdMenteeCompletion request with any body
	PatchReservationsIdMenteeCompletionWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsIdMenteeCompletion(ctx context.Context, id int32, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdMentorCompletion request with any body
	PatchReservationsIdMentorCompletionWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsIdMentorCompletion(ctx context.Context, id int32, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchMentorSearchString request
	GetSearchMentorSearchString(ctx context.Context, searchString string, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsers request with any body
	PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersVerifyNicknameNickname request
	GetUsersVerifyNicknameNickname(ctx context.Context, nickname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersId request
	GetUsersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersId request with any body
	PatchUsersIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersId(ctx context.Context, id int32, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersIdReservations request
	GetUsersIdReservations(ctx context.Context, id int32, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuth42(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuth42Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuth42Callback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuth42CallbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHashtags(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHashtagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHashtagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHashtagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHashtags(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHashtagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHome(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHomeCategoryId(ctx context.Context, categoryId int, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeCategoryIdRequest(c.Server, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMenteeFeedbacks(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMenteeFeedbacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMenteeFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMenteeFeedbacksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMenteeFeedbacks(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMenteeFeedbacksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMenteeFeedbacksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMenteeFeedbacksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorFeedbacks(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorFeedbacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMentorFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMentorFeedbacksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMentorFeedbacks(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMentorFeedbacksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorFeedbacksId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorFeedbacksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorProfiles(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorProfilesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorProfilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesId(ctx context.Context, id int32, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesIdActivationWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdActivationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesIdActivation(ctx context.Context, id int32, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdActivationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservations(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservations(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsId(ctx context.Context, id int32, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdAccept(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdAcceptRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdCancelWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdCancelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdCancel(ctx context.Context, id int32, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdCancelRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdCheck(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdCheckRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMenteeCompletionWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMenteeCompletionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMenteeCompletion(ctx context.Context, id int32, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMenteeCompletionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMentorCompletionWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMentorCompletionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMentorCompletion(ctx context.Context, id int32, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMentorCompletionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchMentorSearchString(ctx context.Context, searchString string, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchMentorSearchStringRequest(c.Server, searchString, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersVerifyNicknameNickname(ctx context.Context, nickname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersVerifyNicknameNicknameRequest(c.Server, nickname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersId(ctx context.Context, id int32, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersIdReservations(ctx context.Context, id int32, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdReservationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthRequest generates requests for GetAuth
func NewGetAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuth42Request generates requests for GetAuth42
func NewGetAuth42Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/42")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuth42CallbackRequest generates requests for GetAuth42Callback
func NewGetAuth42CallbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/42/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHashtagsRequest generates requests for GetHashtags
func NewGetHashtagsRequest(server string, params *GetHashtagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hashtags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProfileId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "profile_id", runtime.ParamLocationQuery, *params.ProfileId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReservationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHashtagsRequest calls the generic PostHashtags builder with application/json body
func NewPostHashtagsRequest(server string, body PostHashtagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHashtagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHashtagsRequestWithBody generates requests for PostHashtags with any type of body
func NewPostHashtagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hashtags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHomeRequest generates requests for GetHome
func NewGetHomeRequest(server string, params *GetHomeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHomeCategoryIdRequest generates requests for GetHomeCategoryId
func NewGetHomeCategoryIdRequest(server string, categoryId int, params *GetHomeCategoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_id", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMenteeFeedbacksRequest generates requests for GetMenteeFeedbacks
func NewGetMenteeFeedbacksRequest(server string, params *GetMenteeFeedbacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentee_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MenteeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentee_id", runtime.ParamLocationQuery, *params.MenteeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MentorId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentor_id", runtime.ParamLocationQuery, *params.MentorId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReservationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMenteeFeedbacksRequest calls the generic PostMenteeFeedbacks builder with application/json body
func NewPostMenteeFeedbacksRequest(server string, body PostMenteeFeedbacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMenteeFeedbacksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMenteeFeedbacksRequestWithBody generates requests for PostMenteeFeedbacks with any type of body
func NewPostMenteeFeedbacksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentee_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMenteeFeedbacksIdRequest generates requests for GetMenteeFeedbacksId
func NewGetMenteeFeedbacksIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentee_feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMentorFeedbacksRequest generates requests for GetMentorFeedbacks
func NewGetMentorFeedbacksRequest(server string, params *GetMentorFeedbacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MenteeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentee_id", runtime.ParamLocationQuery, *params.MenteeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MentorId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentor_id", runtime.ParamLocationQuery, *params.MentorId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReservationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMentorFeedbacksRequest calls the generic PostMentorFeedbacks builder with application/json body
func NewPostMentorFeedbacksRequest(server string, body PostMentorFeedbacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMentorFeedbacksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMentorFeedbacksRequestWithBody generates requests for PostMentorFeedbacks with any type of body
func NewPostMentorFeedbacksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMentorFeedbacksIdRequest generates requests for GetMentorFeedbacksId
func NewGetMentorFeedbacksIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMentorProfilesRequest generates requests for GetMentorProfiles
func NewGetMentorProfilesRequest(server string, params *GetMentorProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsHide != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_hide", runtime.ParamLocationQuery, *params.IsHide); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashtagId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashtag_id", runtime.ParamLocationQuery, *params.HashtagId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CategoryId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMentorProfilesIdRequest generates requests for GetMentorProfilesId
func NewGetMentorProfilesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMentorProfilesIdRequest calls the generic PatchMentorProfilesId builder with application/json body
func NewPatchMentorProfilesIdRequest(server string, id int32, body PatchMentorProfilesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMentorProfilesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchMentorProfilesIdRequestWithBody generates requests for PatchMentorProfilesId with any type of body
func NewPatchMentorProfilesIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchMentorProfilesIdActivationRequest calls the generic PatchMentorProfilesIdActivation builder with application/json body
func NewPatchMentorProfilesIdActivationRequest(server string, id int32, body PatchMentorProfilesIdActivationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMentorProfilesIdActivationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchMentorProfilesIdActivationRequestWithBody generates requests for PatchMentorProfilesIdActivation with any type of body
func NewPatchMentorProfilesIdActivationRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles/%s/activation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReservationsRequest generates requests for GetReservations
func NewGetReservationsRequest(server string, params *GetReservationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HashtagId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashtag_id", runtime.ParamLocationQuery, *params.HashtagId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CategoryId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostReservationsRequest calls the generic PostReservations builder with application/json body
func NewPostReservationsRequest(server string, body PostReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReservationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReservationsRequestWithBody generates requests for PostReservations with any type of body
func NewPostReservationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReservationsIdRequest generates requests for GetReservationsId
func NewGetReservationsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchReservationsIdRequest calls the generic PatchReservationsId builder with application/json body
func NewPatchReservationsIdRequest(server string, id int32, body PatchReservationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdRequestWithBody generates requests for PatchReservationsId with any type of body
func NewPatchReservationsIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchReservationsIdAcceptRequest generates requests for PatchReservationsIdAccept
func NewPatchReservationsIdAcceptRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchReservationsIdCancelRequest calls the generic PatchReservationsIdCancel builder with application/json body
func NewPatchReservationsIdCancelRequest(server string, id int32, body PatchReservationsIdCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdCancelRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdCancelRequestWithBody generates requests for PatchReservationsIdCancel with any type of body
func NewPatchReservationsIdCancelRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchReservationsIdCheckRequest generates requests for PatchReservationsIdCheck
func NewPatchReservationsIdCheckRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/check", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchReservationsIdMenteeCompletionRequest calls the generic PatchReservationsIdMenteeCompletion builder with application/json body
func NewPatchReservationsIdMenteeCompletionRequest(server string, id int32, body PatchReservationsIdMenteeCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdMenteeCompletionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdMenteeCompletionRequestWithBody generates requests for PatchReservationsIdMenteeCompletion with any type of body
func NewPatchReservationsIdMenteeCompletionRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/mentee_completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchReservationsIdMentorCompletionRequest calls the generic PatchReservationsIdMentorCompletion builder with application/json body
func NewPatchReservationsIdMentorCompletionRequest(server string, id int32, body PatchReservationsIdMentorCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdMentorCompletionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdMentorCompletionRequestWithBody generates requests for PatchReservationsIdMentorCompletion with any type of body
func NewPatchReservationsIdMentorCompletionRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/mentor_completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchMentorSearchStringRequest generates requests for GetSearchMentorSearchString
func NewGetSearchMentorSearchStringRequest(server string, searchString string, params *GetSearchMentorSearchStringParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "search_string", runtime.ParamLocationPath, searchString)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/mentor/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchByUserNickname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_by_user_nickname", runtime.ParamLocationQuery, *params.SearchByUserNickname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchByHashtagName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_by_hashtag_name", runtime.ParamLocationQuery, *params.SearchByHashtagName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchByCategoryName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_by_category_name", runtime.ParamLocationQuery, *params.SearchByCategoryName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersRequest calls the generic PostUsers builder with application/json body
func NewPostUsersRequest(server string, body PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersVerifyNicknameNicknameRequest generates requests for GetUsersVerifyNicknameNickname
func NewGetUsersVerifyNicknameNicknameRequest(server string, nickname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nickname", runtime.ParamLocationPath, nickname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/verify_nickname/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersIdRequest generates requests for GetUsersId
func NewGetUsersIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUsersIdRequest calls the generic PatchUsersId builder with application/json body
func NewPatchUsersIdRequest(server string, id int32, body PatchUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchUsersIdRequestWithBody generates requests for PatchUsersId with any type of body
func NewPatchUsersIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdReservationsRequest generates requests for GetUsersIdReservations
func NewGetUsersIdReservationsRequest(server string, id int32, params *GetUsersIdReservationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Take != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Role != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("matrix", false, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuth request
	GetAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResponse, error)

	// GetAuth42 request
	GetAuth42WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuth42Response, error)

	// GetAuth42Callback request
	GetAuth42CallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuth42CallbackResponse, error)

	// GetCategories request
	GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// GetHashtags request
	GetHashtagsWithResponse(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*GetHashtagsResponse, error)

	// PostHashtags request with any body
	PostHashtagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error)

	PostHashtagsWithResponse(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error)

	// GetHome request
	GetHomeWithResponse(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*GetHomeResponse, error)

	// GetHomeCategoryId request
	GetHomeCategoryIdWithResponse(ctx context.Context, categoryId int, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*GetHomeCategoryIdResponse, error)

	// GetMenteeFeedbacks request
	GetMenteeFeedbacksWithResponse(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksResponse, error)

	// PostMenteeFeedbacks request with any body
	PostMenteeFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error)

	PostMenteeFeedbacksWithResponse(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error)

	// GetMenteeFeedbacksId request
	GetMenteeFeedbacksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksIdResponse, error)

	// GetMentorFeedbacks request
	GetMentorFeedbacksWithResponse(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksResponse, error)

	// PostMentorFeedbacks request with any body
	PostMentorFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error)

	PostMentorFeedbacksWithResponse(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error)

	// GetMentorFeedbacksId request
	GetMentorFeedbacksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksIdResponse, error)

	// GetMentorProfiles request
	GetMentorProfilesWithResponse(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*GetMentorProfilesResponse, error)

	// GetMentorProfilesId request
	GetMentorProfilesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetMentorProfilesIdResponse, error)

	// PatchMentorProfilesId request with any body
	PatchMentorProfilesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error)

	PatchMentorProfilesIdWithResponse(ctx context.Context, id int32, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error)

	// PatchMentorProfilesIdActivation request with any body
	PatchMentorProfilesIdActivationWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error)

	PatchMentorProfilesIdActivationWithResponse(ctx context.Context, id int32, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error)

	// GetReservations request
	GetReservationsWithResponse(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error)

	// PostReservations request with any body
	PostReservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error)

	PostReservationsWithResponse(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error)

	// GetReservationsId request
	GetReservationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error)

	// PatchReservationsId request with any body
	PatchReservationsIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error)

	PatchReservationsIdWithResponse(ctx context.Context, id int32, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error)

	// PatchReservationsIdAccept request
	PatchReservationsIdAcceptWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PatchReservationsIdAcceptResponse, error)

	// PatchReservationsIdCancel request with any body
	PatchReservationsIdCancelWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error)

	PatchReservationsIdCancelWithResponse(ctx context.Context, id int32, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error)

	// PatchReservationsIdCheck request
	PatchReservationsIdCheckWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PatchReservationsIdCheckResponse, error)

	// PatchReservationsIdMenteeCompletion request with any body
	PatchReservationsIdMenteeCompletionWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error)

	PatchReservationsIdMenteeCompletionWithResponse(ctx context.Context, id int32, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error)

	// PatchReservationsIdMentorCompletion request with any body
	PatchReservationsIdMentorCompletionWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error)

	PatchReservationsIdMentorCompletionWithResponse(ctx context.Context, id int32, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error)

	// GetSearchMentorSearchString request
	GetSearchMentorSearchStringWithResponse(ctx context.Context, searchString string, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*GetSearchMentorSearchStringResponse, error)

	// GetUsers request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// PostUsers request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// GetUsersVerifyNicknameNickname request
	GetUsersVerifyNicknameNicknameWithResponse(ctx context.Context, nickname string, reqEditors ...RequestEditorFn) (*GetUsersVerifyNicknameNicknameResponse, error)

	// GetUsersId request
	GetUsersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// PatchUsersId request with any body
	PatchUsersIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error)

	PatchUsersIdWithResponse(ctx context.Context, id int32, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error)

	// GetUsersIdReservations request
	GetUsersIdReservationsWithResponse(ctx context.Context, id int32, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*GetUsersIdReservationsResponse, error)
}

type GetAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthGet
}

// Status returns HTTPResponse.Status
func (r GetAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuth42Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuth42Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuth42Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuth42CallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuth42CallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuth42CallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CategoryGet
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHashtagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HashtagPagination
}

// Status returns HTTPResponse.Status
func (r GetHashtagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHashtagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHashtagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HashtagGet
	JSON201      *HashtagGet
}

// Status returns HTTPResponse.Status
func (r PostHashtagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHashtagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchMentorGet
}

// Status returns HTTPResponse.Status
func (r GetHomeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchMentorGet
}

// Status returns HTTPResponse.Status
func (r GetHomeCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMenteeFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MenteeFeedbackPagination
}

// Status returns HTTPResponse.Status
func (r GetMenteeFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMenteeFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMenteeFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MenteeFeedbackGet
}

// Status returns HTTPResponse.Status
func (r PostMenteeFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMenteeFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMenteeFeedbacksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MenteeFeedbackGet
}

// Status returns HTTPResponse.Status
func (r GetMenteeFeedbacksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMenteeFeedbacksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorFeedbackPagination
}

// Status returns HTTPResponse.Status
func (r GetMentorFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMentorFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MentorFeedbackGet
}

// Status returns HTTPResponse.Status
func (r PostMentorFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMentorFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorFeedbacksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorFeedbackGet
}

// Status returns HTTPResponse.Status
func (r GetMentorFeedbacksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorFeedbacksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MentorProfilePagination
}

// Status returns HTTPResponse.Status
func (r GetMentorProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMentorProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMentorProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorProfileGet
}

// Status returns HTTPResponse.Status
func (r PatchMentorProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMentorProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMentorProfilesIdActivationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorProfileGet
}

// Status returns HTTPResponse.Status
func (r PatchMentorProfilesIdActivationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMentorProfilesIdActivationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReservationPagination
}

// Status returns HTTPResponse.Status
func (r GetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PostReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReservationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r GetReservationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReservationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdMenteeCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdMenteeCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdMenteeCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdMentorCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdMentorCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdMentorCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchMentorSearchStringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchMentorGet
}

// Status returns HTTPResponse.Status
func (r GetSearchMentorSearchStringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchMentorSearchStringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UsersGet
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UsersGet
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersVerifyNicknameNicknameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUsersVerifyNicknameNicknameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersVerifyNicknameNicknameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersGet
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersGet
}

// Status returns HTTPResponse.Status
func (r PatchUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersReservationsPagination
}

// Status returns HTTPResponse.Status
func (r GetUsersIdReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthWithResponse request returning *GetAuthResponse
func (c *ClientWithResponses) GetAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResponse, error) {
	rsp, err := c.GetAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthResponse(rsp)
}

// GetAuth42WithResponse request returning *GetAuth42Response
func (c *ClientWithResponses) GetAuth42WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuth42Response, error) {
	rsp, err := c.GetAuth42(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuth42Response(rsp)
}

// GetAuth42CallbackWithResponse request returning *GetAuth42CallbackResponse
func (c *ClientWithResponses) GetAuth42CallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuth42CallbackResponse, error) {
	rsp, err := c.GetAuth42Callback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuth42CallbackResponse(rsp)
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// GetHashtagsWithResponse request returning *GetHashtagsResponse
func (c *ClientWithResponses) GetHashtagsWithResponse(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*GetHashtagsResponse, error) {
	rsp, err := c.GetHashtags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHashtagsResponse(rsp)
}

// PostHashtagsWithBodyWithResponse request with arbitrary body returning *PostHashtagsResponse
func (c *ClientWithResponses) PostHashtagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error) {
	rsp, err := c.PostHashtagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHashtagsResponse(rsp)
}

func (c *ClientWithResponses) PostHashtagsWithResponse(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error) {
	rsp, err := c.PostHashtags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHashtagsResponse(rsp)
}

// GetHomeWithResponse request returning *GetHomeResponse
func (c *ClientWithResponses) GetHomeWithResponse(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*GetHomeResponse, error) {
	rsp, err := c.GetHome(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeResponse(rsp)
}

// GetHomeCategoryIdWithResponse request returning *GetHomeCategoryIdResponse
func (c *ClientWithResponses) GetHomeCategoryIdWithResponse(ctx context.Context, categoryId int, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*GetHomeCategoryIdResponse, error) {
	rsp, err := c.GetHomeCategoryId(ctx, categoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeCategoryIdResponse(rsp)
}

// GetMenteeFeedbacksWithResponse request returning *GetMenteeFeedbacksResponse
func (c *ClientWithResponses) GetMenteeFeedbacksWithResponse(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksResponse, error) {
	rsp, err := c.GetMenteeFeedbacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMenteeFeedbacksResponse(rsp)
}

// PostMenteeFeedbacksWithBodyWithResponse request with arbitrary body returning *PostMenteeFeedbacksResponse
func (c *ClientWithResponses) PostMenteeFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error) {
	rsp, err := c.PostMenteeFeedbacksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMenteeFeedbacksResponse(rsp)
}

func (c *ClientWithResponses) PostMenteeFeedbacksWithResponse(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error) {
	rsp, err := c.PostMenteeFeedbacks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMenteeFeedbacksResponse(rsp)
}

// GetMenteeFeedbacksIdWithResponse request returning *GetMenteeFeedbacksIdResponse
func (c *ClientWithResponses) GetMenteeFeedbacksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksIdResponse, error) {
	rsp, err := c.GetMenteeFeedbacksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMenteeFeedbacksIdResponse(rsp)
}

// GetMentorFeedbacksWithResponse request returning *GetMentorFeedbacksResponse
func (c *ClientWithResponses) GetMentorFeedbacksWithResponse(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksResponse, error) {
	rsp, err := c.GetMentorFeedbacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorFeedbacksResponse(rsp)
}

// PostMentorFeedbacksWithBodyWithResponse request with arbitrary body returning *PostMentorFeedbacksResponse
func (c *ClientWithResponses) PostMentorFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error) {
	rsp, err := c.PostMentorFeedbacksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMentorFeedbacksResponse(rsp)
}

func (c *ClientWithResponses) PostMentorFeedbacksWithResponse(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error) {
	rsp, err := c.PostMentorFeedbacks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMentorFeedbacksResponse(rsp)
}

// GetMentorFeedbacksIdWithResponse request returning *GetMentorFeedbacksIdResponse
func (c *ClientWithResponses) GetMentorFeedbacksIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksIdResponse, error) {
	rsp, err := c.GetMentorFeedbacksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorFeedbacksIdResponse(rsp)
}

// GetMentorProfilesWithResponse request returning *GetMentorProfilesResponse
func (c *ClientWithResponses) GetMentorProfilesWithResponse(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*GetMentorProfilesResponse, error) {
	rsp, err := c.GetMentorProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorProfilesResponse(rsp)
}

// GetMentorProfilesIdWithResponse request returning *GetMentorProfilesIdResponse
func (c *ClientWithResponses) GetMentorProfilesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetMentorProfilesIdResponse, error) {
	rsp, err := c.GetMentorProfilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorProfilesIdResponse(rsp)
}

// PatchMentorProfilesIdWithBodyWithResponse request with arbitrary body returning *PatchMentorProfilesIdResponse
func (c *ClientWithResponses) PatchMentorProfilesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error) {
	rsp, err := c.PatchMentorProfilesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchMentorProfilesIdWithResponse(ctx context.Context, id int32, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error) {
	rsp, err := c.PatchMentorProfilesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdResponse(rsp)
}

// PatchMentorProfilesIdActivationWithBodyWithResponse request with arbitrary body returning *PatchMentorProfilesIdActivationResponse
func (c *ClientWithResponses) PatchMentorProfilesIdActivationWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error) {
	rsp, err := c.PatchMentorProfilesIdActivationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdActivationResponse(rsp)
}

func (c *ClientWithResponses) PatchMentorProfilesIdActivationWithResponse(ctx context.Context, id int32, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error) {
	rsp, err := c.PatchMentorProfilesIdActivation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdActivationResponse(rsp)
}

// GetReservationsWithResponse request returning *GetReservationsResponse
func (c *ClientWithResponses) GetReservationsWithResponse(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error) {
	rsp, err := c.GetReservations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsResponse(rsp)
}

// PostReservationsWithBodyWithResponse request with arbitrary body returning *PostReservationsResponse
func (c *ClientWithResponses) PostReservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error) {
	rsp, err := c.PostReservationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsResponse(rsp)
}

func (c *ClientWithResponses) PostReservationsWithResponse(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error) {
	rsp, err := c.PostReservations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsResponse(rsp)
}

// GetReservationsIdWithResponse request returning *GetReservationsIdResponse
func (c *ClientWithResponses) GetReservationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error) {
	rsp, err := c.GetReservationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsIdResponse(rsp)
}

// PatchReservationsIdWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdResponse
func (c *ClientWithResponses) PatchReservationsIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error) {
	rsp, err := c.PatchReservationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdWithResponse(ctx context.Context, id int32, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error) {
	rsp, err := c.PatchReservationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdResponse(rsp)
}

// PatchReservationsIdAcceptWithResponse request returning *PatchReservationsIdAcceptResponse
func (c *ClientWithResponses) PatchReservationsIdAcceptWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PatchReservationsIdAcceptResponse, error) {
	rsp, err := c.PatchReservationsIdAccept(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdAcceptResponse(rsp)
}

// PatchReservationsIdCancelWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdCancelResponse
func (c *ClientWithResponses) PatchReservationsIdCancelWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error) {
	rsp, err := c.PatchReservationsIdCancelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdCancelResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdCancelWithResponse(ctx context.Context, id int32, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error) {
	rsp, err := c.PatchReservationsIdCancel(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdCancelResponse(rsp)
}

// PatchReservationsIdCheckWithResponse request returning *PatchReservationsIdCheckResponse
func (c *ClientWithResponses) PatchReservationsIdCheckWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PatchReservationsIdCheckResponse, error) {
	rsp, err := c.PatchReservationsIdCheck(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdCheckResponse(rsp)
}

// PatchReservationsIdMenteeCompletionWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdMenteeCompletionResponse
func (c *ClientWithResponses) PatchReservationsIdMenteeCompletionWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMenteeCompletionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMenteeCompletionResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdMenteeCompletionWithResponse(ctx context.Context, id int32, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMenteeCompletion(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMenteeCompletionResponse(rsp)
}

// PatchReservationsIdMentorCompletionWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdMentorCompletionResponse
func (c *ClientWithResponses) PatchReservationsIdMentorCompletionWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMentorCompletionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMentorCompletionResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdMentorCompletionWithResponse(ctx context.Context, id int32, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMentorCompletion(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMentorCompletionResponse(rsp)
}

// GetSearchMentorSearchStringWithResponse request returning *GetSearchMentorSearchStringResponse
func (c *ClientWithResponses) GetSearchMentorSearchStringWithResponse(ctx context.Context, searchString string, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*GetSearchMentorSearchStringResponse, error) {
	rsp, err := c.GetSearchMentorSearchString(ctx, searchString, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchMentorSearchStringResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

func (c *ClientWithResponses) PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// GetUsersVerifyNicknameNicknameWithResponse request returning *GetUsersVerifyNicknameNicknameResponse
func (c *ClientWithResponses) GetUsersVerifyNicknameNicknameWithResponse(ctx context.Context, nickname string, reqEditors ...RequestEditorFn) (*GetUsersVerifyNicknameNicknameResponse, error) {
	rsp, err := c.GetUsersVerifyNicknameNickname(ctx, nickname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersVerifyNicknameNicknameResponse(rsp)
}

// GetUsersIdWithResponse request returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// PatchUsersIdWithBodyWithResponse request with arbitrary body returning *PatchUsersIdResponse
func (c *ClientWithResponses) PatchUsersIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error) {
	rsp, err := c.PatchUsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersIdWithResponse(ctx context.Context, id int32, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error) {
	rsp, err := c.PatchUsersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersIdResponse(rsp)
}

// GetUsersIdReservationsWithResponse request returning *GetUsersIdReservationsResponse
func (c *ClientWithResponses) GetUsersIdReservationsWithResponse(ctx context.Context, id int32, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*GetUsersIdReservationsResponse, error) {
	rsp, err := c.GetUsersIdReservations(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdReservationsResponse(rsp)
}

// ParseGetAuthResponse parses an HTTP response from a GetAuthWithResponse call
func ParseGetAuthResponse(rsp *http.Response) (*GetAuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuth42Response parses an HTTP response from a GetAuth42WithResponse call
func ParseGetAuth42Response(rsp *http.Response) (*GetAuth42Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuth42Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuth42CallbackResponse parses an HTTP response from a GetAuth42CallbackWithResponse call
func ParseGetAuth42CallbackResponse(rsp *http.Response) (*GetAuth42CallbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuth42CallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CategoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHashtagsResponse parses an HTTP response from a GetHashtagsWithResponse call
func ParseGetHashtagsResponse(rsp *http.Response) (*GetHashtagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHashtagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HashtagPagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostHashtagsResponse parses an HTTP response from a PostHashtagsWithResponse call
func ParsePostHashtagsResponse(rsp *http.Response) (*PostHashtagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHashtagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HashtagGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HashtagGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetHomeResponse parses an HTTP response from a GetHomeWithResponse call
func ParseGetHomeResponse(rsp *http.Response) (*GetHomeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchMentorGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHomeCategoryIdResponse parses an HTTP response from a GetHomeCategoryIdWithResponse call
func ParseGetHomeCategoryIdResponse(rsp *http.Response) (*GetHomeCategoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchMentorGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMenteeFeedbacksResponse parses an HTTP response from a GetMenteeFeedbacksWithResponse call
func ParseGetMenteeFeedbacksResponse(rsp *http.Response) (*GetMenteeFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMenteeFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MenteeFeedbackPagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMenteeFeedbacksResponse parses an HTTP response from a PostMenteeFeedbacksWithResponse call
func ParsePostMenteeFeedbacksResponse(rsp *http.Response) (*PostMenteeFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMenteeFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MenteeFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMenteeFeedbacksIdResponse parses an HTTP response from a GetMenteeFeedbacksIdWithResponse call
func ParseGetMenteeFeedbacksIdResponse(rsp *http.Response) (*GetMenteeFeedbacksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMenteeFeedbacksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MenteeFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMentorFeedbacksResponse parses an HTTP response from a GetMentorFeedbacksWithResponse call
func ParseGetMentorFeedbacksResponse(rsp *http.Response) (*GetMentorFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorFeedbackPagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMentorFeedbacksResponse parses an HTTP response from a PostMentorFeedbacksWithResponse call
func ParsePostMentorFeedbacksResponse(rsp *http.Response) (*PostMentorFeedbacksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMentorFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MentorFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMentorFeedbacksIdResponse parses an HTTP response from a GetMentorFeedbacksIdWithResponse call
func ParseGetMentorFeedbacksIdResponse(rsp *http.Response) (*GetMentorFeedbacksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorFeedbacksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMentorProfilesResponse parses an HTTP response from a GetMentorProfilesWithResponse call
func ParseGetMentorProfilesResponse(rsp *http.Response) (*GetMentorProfilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MentorProfilePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMentorProfilesIdResponse parses an HTTP response from a GetMentorProfilesIdWithResponse call
func ParseGetMentorProfilesIdResponse(rsp *http.Response) (*GetMentorProfilesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchMentorProfilesIdResponse parses an HTTP response from a PatchMentorProfilesIdWithResponse call
func ParsePatchMentorProfilesIdResponse(rsp *http.Response) (*PatchMentorProfilesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMentorProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorProfileGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchMentorProfilesIdActivationResponse parses an HTTP response from a PatchMentorProfilesIdActivationWithResponse call
func ParsePatchMentorProfilesIdActivationResponse(rsp *http.Response) (*PatchMentorProfilesIdActivationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMentorProfilesIdActivationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorProfileGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReservationsResponse parses an HTTP response from a GetReservationsWithResponse call
func ParseGetReservationsResponse(rsp *http.Response) (*GetReservationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReservationPagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReservationsResponse parses an HTTP response from a PostReservationsWithResponse call
func ParsePostReservationsResponse(rsp *http.Response) (*PostReservationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetReservationsIdResponse parses an HTTP response from a GetReservationsIdWithResponse call
func ParseGetReservationsIdResponse(rsp *http.Response) (*GetReservationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReservationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdResponse parses an HTTP response from a PatchReservationsIdWithResponse call
func ParsePatchReservationsIdResponse(rsp *http.Response) (*PatchReservationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdAcceptResponse parses an HTTP response from a PatchReservationsIdAcceptWithResponse call
func ParsePatchReservationsIdAcceptResponse(rsp *http.Response) (*PatchReservationsIdAcceptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdCancelResponse parses an HTTP response from a PatchReservationsIdCancelWithResponse call
func ParsePatchReservationsIdCancelResponse(rsp *http.Response) (*PatchReservationsIdCancelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdCheckResponse parses an HTTP response from a PatchReservationsIdCheckWithResponse call
func ParsePatchReservationsIdCheckResponse(rsp *http.Response) (*PatchReservationsIdCheckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdMenteeCompletionResponse parses an HTTP response from a PatchReservationsIdMenteeCompletionWithResponse call
func ParsePatchReservationsIdMenteeCompletionResponse(rsp *http.Response) (*PatchReservationsIdMenteeCompletionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdMenteeCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdMentorCompletionResponse parses an HTTP response from a PatchReservationsIdMentorCompletionWithResponse call
func ParsePatchReservationsIdMentorCompletionResponse(rsp *http.Response) (*PatchReservationsIdMentorCompletionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdMentorCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchMentorSearchStringResponse parses an HTTP response from a GetSearchMentorSearchStringWithResponse call
func ParseGetSearchMentorSearchStringResponse(rsp *http.Response) (*GetSearchMentorSearchStringResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchMentorSearchStringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchMentorGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UsersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UsersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUsersVerifyNicknameNicknameResponse parses an HTTP response from a GetUsersVerifyNicknameNicknameWithResponse call
func ParseGetUsersVerifyNicknameNicknameResponse(rsp *http.Response) (*GetUsersVerifyNicknameNicknameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersVerifyNicknameNicknameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUsersIdResponse parses an HTTP response from a PatchUsersIdWithResponse call
func ParsePatchUsersIdResponse(rsp *http.Response) (*PatchUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersIdReservationsResponse parses an HTTP response from a GetUsersIdReservationsWithResponse call
func ParseGetUsersIdReservationsResponse(rsp *http.Response) (*GetUsersIdReservationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersReservationsPagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// verify access token
	// (GET /auth)
	GetAuth(ctx echo.Context) error
	// 42 OAuth2 (redirected to 42 API)
	// (GET /auth/42)
	GetAuth42(ctx echo.Context) error
	// 42 OAuth2 callback (verify or create user and return token)
	// (GET /auth/42/callback)
	GetAuth42Callback(ctx echo.Context) error
	// Get all categories
	// (GET /categories)
	GetCategories(ctx echo.Context) error
	// Get all hashtags
	// (GET /hashtags)
	GetHashtags(ctx echo.Context, params GetHashtagsParams) error
	// Create a new hashtag
	// (POST /hashtags)
	PostHashtags(ctx echo.Context) error
	// Get main page mentor profiles (random)
	// (GET /home)
	GetHome(ctx echo.Context, params GetHomeParams) error
	// Get main page mentor profiles by category
	// (GET /home/{category_id})
	GetHomeCategoryId(ctx echo.Context, categoryId int, params GetHomeCategoryIdParams) error
	// Get all mentee feedbacks order by recent updated
	// (GET /mentee_feedbacks)
	GetMenteeFeedbacks(ctx echo.Context, params GetMenteeFeedbacksParams) error
	// Create a new mentee feedback
	// (POST /mentee_feedbacks)
	PostMenteeFeedbacks(ctx echo.Context) error
	// Get a mentee feedback by ID
	// (GET /mentee_feedbacks/{id})
	GetMenteeFeedbacksId(ctx echo.Context, id int32) error
	// Get all mentor feedbacks
	// (GET /mentor_feedbacks)
	GetMentorFeedbacks(ctx echo.Context, params GetMentorFeedbacksParams) error
	// Create a new mentor feedback
	// (POST /mentor_feedbacks)
	PostMentorFeedbacks(ctx echo.Context) error
	// Get a mentor feedback by ID
	// (GET /mentor_feedbacks/{id})
	GetMentorFeedbacksId(ctx echo.Context, id int32) error
	// Get all mentor profiles
	// (GET /mentor_profiles)
	GetMentorProfiles(ctx echo.Context, params GetMentorProfilesParams) error
	// Get a mentor profile by ID
	// (GET /mentor_profiles/{id})
	GetMentorProfilesId(ctx echo.Context, id int32) error
	// Update mentor profile
	// (PATCH /mentor_profiles/{id})
	PatchMentorProfilesId(ctx echo.Context, id int32) error
	// Activate or Deactivate mentorProfiles
	// (PATCH /mentor_profiles/{id}/activation)
	PatchMentorProfilesIdActivation(ctx echo.Context, id int32) error
	// Get all reservations
	// (GET /reservations)
	GetReservations(ctx echo.Context, params GetReservationsParams) error
	// Create a new reservation
	// (POST /reservations)
	PostReservations(ctx echo.Context) error
	// Get a reservation by ID
	// (GET /reservations/{id})
	GetReservationsId(ctx echo.Context, id int32) error
	// Update reservation
	// (PATCH /reservations/{id})
	PatchReservationsId(ctx echo.Context, id int32) error
	// accept reservation
	// (PATCH /reservations/{id}/accept)
	PatchReservationsIdAccept(ctx echo.Context, id int32) error
	// cancel reservation
	// (PATCH /reservations/{id}/cancel)
	PatchReservationsIdCancel(ctx echo.Context, id int32) error
	// check accepted reservation by mentee
	// (PATCH /reservations/{id}/check)
	PatchReservationsIdCheck(ctx echo.Context, id int32) error
	// complete reservation as mentee
	// (PATCH /reservations/{id}/mentee_completion)
	PatchReservationsIdMenteeCompletion(ctx echo.Context, id int32) error
	// complete reservation as mentor
	// (PATCH /reservations/{id}/mentor_completion)
	PatchReservationsIdMentorCompletion(ctx echo.Context, id int32) error
	// Search mentor by string
	// (GET /search/mentor/{search_string})
	GetSearchMentorSearchString(ctx echo.Context, searchString string, params GetSearchMentorSearchStringParams) error
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Verify nickname
	// (GET /users/verify_nickname/{nickname})
	GetUsersVerifyNicknameNickname(ctx echo.Context, nickname string) error
	// Get a user by ID
	// (GET /users/{id})
	GetUsersId(ctx echo.Context, id int32) error
	// Update user
	// (PATCH /users/{id})
	PatchUsersId(ctx echo.Context, id int32) error
	// Get a user reservations by ID
	// (GET /users/{id}/reservations)
	GetUsersIdReservations(ctx echo.Context, id int32, params GetUsersIdReservationsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuth converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuth(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuth(ctx)
	return err
}

// GetAuth42 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuth42(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuth42(ctx)
	return err
}

// GetAuth42Callback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuth42Callback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuth42Callback(ctx)
	return err
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategories(ctx)
	return err
}

// GetHashtags converts echo context to params.
func (w *ServerInterfaceWrapper) GetHashtags(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHashtagsParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "profile_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "profile_id", ctx.QueryParams(), &params.ProfileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile_id: %s", err))
	}

	// ------------- Optional query parameter "reservation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "reservation_id", ctx.QueryParams(), &params.ReservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHashtags(ctx, params)
	return err
}

// PostHashtags converts echo context to params.
func (w *ServerInterfaceWrapper) PostHashtags(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostHashtags(ctx)
	return err
}

// GetHome converts echo context to params.
func (w *ServerInterfaceWrapper) GetHome(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHomeParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHome(ctx, params)
	return err
}

// GetHomeCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) GetHomeCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHomeCategoryIdParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHomeCategoryId(ctx, categoryId, params)
	return err
}

// GetMenteeFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetMenteeFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMenteeFeedbacksParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "mentee_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentee_id", ctx.QueryParams(), &params.MenteeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentee_id: %s", err))
	}

	// ------------- Optional query parameter "mentor_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentor_id", ctx.QueryParams(), &params.MentorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentor_id: %s", err))
	}

	// ------------- Optional query parameter "reservation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "reservation_id", ctx.QueryParams(), &params.ReservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMenteeFeedbacks(ctx, params)
	return err
}

// PostMenteeFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) PostMenteeFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMenteeFeedbacks(ctx)
	return err
}

// GetMenteeFeedbacksId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMenteeFeedbacksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(NormalUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMenteeFeedbacksId(ctx, id)
	return err
}

// GetMentorFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentorFeedbacksParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "mentee_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentee_id", ctx.QueryParams(), &params.MenteeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentee_id: %s", err))
	}

	// ------------- Optional query parameter "mentor_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentor_id", ctx.QueryParams(), &params.MentorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentor_id: %s", err))
	}

	// ------------- Optional query parameter "reservation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "reservation_id", ctx.QueryParams(), &params.ReservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMentorFeedbacks(ctx, params)
	return err
}

// PostMentorFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) PostMentorFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMentorFeedbacks(ctx)
	return err
}

// GetMentorFeedbacksId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorFeedbacksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(NormalUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMentorFeedbacksId(ctx, id)
	return err
}

// GetMentorProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentorProfilesParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "is_hide" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_hide", ctx.QueryParams(), &params.IsHide)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_hide: %s", err))
	}

	// ------------- Optional query parameter "hashtag_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtag_id", ctx.QueryParams(), &params.HashtagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtag_id: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMentorProfiles(ctx, params)
	return err
}

// GetMentorProfilesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorProfilesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMentorProfilesId(ctx, id)
	return err
}

// PatchMentorProfilesId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMentorProfilesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchMentorProfilesId(ctx, id)
	return err
}

// PatchMentorProfilesIdActivation converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMentorProfilesIdActivation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchMentorProfilesIdActivation(ctx, id)
	return err
}

// GetReservations converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservations(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReservationsParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "hashtag_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtag_id", ctx.QueryParams(), &params.HashtagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtag_id: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReservations(ctx, params)
	return err
}

// PostReservations converts echo context to params.
func (w *ServerInterfaceWrapper) PostReservations(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReservations(ctx)
	return err
}

// GetReservationsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReservationsId(ctx, id)
	return err
}

// PatchReservationsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(AdminUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchReservationsId(ctx, id)
	return err
}

// PatchReservationsIdAccept converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchReservationsIdAccept(ctx, id)
	return err
}

// PatchReservationsIdCancel converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchReservationsIdCancel(ctx, id)
	return err
}

// PatchReservationsIdCheck converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdCheck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchReservationsIdCheck(ctx, id)
	return err
}

// PatchReservationsIdMenteeCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdMenteeCompletion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchReservationsIdMenteeCompletion(ctx, id)
	return err
}

// PatchReservationsIdMentorCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdMentorCompletion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchReservationsIdMentorCompletion(ctx, id)
	return err
}

// GetSearchMentorSearchString converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearchMentorSearchString(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "search_string" -------------
	var searchString string

	err = runtime.BindStyledParameterWithLocation("simple", false, "search_string", runtime.ParamLocationPath, ctx.Param("search_string"), &searchString)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_string: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchMentorSearchStringParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "search_by_user_nickname" -------------

	err = runtime.BindQueryParameter("form", true, false, "search_by_user_nickname", ctx.QueryParams(), &params.SearchByUserNickname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_by_user_nickname: %s", err))
	}

	// ------------- Optional query parameter "search_by_hashtag_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "search_by_hashtag_name", ctx.QueryParams(), &params.SearchByHashtagName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_by_hashtag_name: %s", err))
	}

	// ------------- Optional query parameter "search_by_category_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "search_by_category_name", ctx.QueryParams(), &params.SearchByCategoryName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_by_category_name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSearchMentorSearchString(ctx, searchString, params)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// GetUsersVerifyNicknameNickname converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersVerifyNicknameNickname(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nickname" -------------
	var nickname string

	err = runtime.BindStyledParameterWithLocation("simple", false, "nickname", runtime.ParamLocationPath, ctx.Param("nickname"), &nickname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nickname: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersVerifyNicknameNickname(ctx, nickname)
	return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(NormalUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersId(ctx, id)
	return err
}

// PatchUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUsersId(ctx, id)
	return err
}

// GetUsersIdReservations converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIdReservations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersIdReservationsParams
	// ------------- Optional query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, false, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("matrix", false, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersIdReservations(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth", wrapper.GetAuth)
	router.GET(baseURL+"/auth/42", wrapper.GetAuth42)
	router.GET(baseURL+"/auth/42/callback", wrapper.GetAuth42Callback)
	router.GET(baseURL+"/categories", wrapper.GetCategories)
	router.GET(baseURL+"/hashtags", wrapper.GetHashtags)
	router.POST(baseURL+"/hashtags", wrapper.PostHashtags)
	router.GET(baseURL+"/home", wrapper.GetHome)
	router.GET(baseURL+"/home/:category_id", wrapper.GetHomeCategoryId)
	router.GET(baseURL+"/mentee_feedbacks", wrapper.GetMenteeFeedbacks)
	router.POST(baseURL+"/mentee_feedbacks", wrapper.PostMenteeFeedbacks)
	router.GET(baseURL+"/mentee_feedbacks/:id", wrapper.GetMenteeFeedbacksId)
	router.GET(baseURL+"/mentor_feedbacks", wrapper.GetMentorFeedbacks)
	router.POST(baseURL+"/mentor_feedbacks", wrapper.PostMentorFeedbacks)
	router.GET(baseURL+"/mentor_feedbacks/:id", wrapper.GetMentorFeedbacksId)
	router.GET(baseURL+"/mentor_profiles", wrapper.GetMentorProfiles)
	router.GET(baseURL+"/mentor_profiles/:id", wrapper.GetMentorProfilesId)
	router.PATCH(baseURL+"/mentor_profiles/:id", wrapper.PatchMentorProfilesId)
	router.PATCH(baseURL+"/mentor_profiles/:id/activation", wrapper.PatchMentorProfilesIdActivation)
	router.GET(baseURL+"/reservations", wrapper.GetReservations)
	router.POST(baseURL+"/reservations", wrapper.PostReservations)
	router.GET(baseURL+"/reservations/:id", wrapper.GetReservationsId)
	router.PATCH(baseURL+"/reservations/:id", wrapper.PatchReservationsId)
	router.PATCH(baseURL+"/reservations/:id/accept", wrapper.PatchReservationsIdAccept)
	router.PATCH(baseURL+"/reservations/:id/cancel", wrapper.PatchReservationsIdCancel)
	router.PATCH(baseURL+"/reservations/:id/check", wrapper.PatchReservationsIdCheck)
	router.PATCH(baseURL+"/reservations/:id/mentee_completion", wrapper.PatchReservationsIdMenteeCompletion)
	router.PATCH(baseURL+"/reservations/:id/mentor_completion", wrapper.PatchReservationsIdMentorCompletion)
	router.GET(baseURL+"/search/mentor/:search_string", wrapper.GetSearchMentorSearchString)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.GET(baseURL+"/users/verify_nickname/:nickname", wrapper.GetUsersVerifyNicknameNickname)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersId)
	router.PATCH(baseURL+"/users/:id", wrapper.PatchUsersId)
	router.GET(baseURL+"/users/:id/reservations", wrapper.GetUsersIdReservations)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdbW8bOX7/KsS0BziuEsmKt8AJyAudrSRqHNu1kz2giWHTGtqa88xQy6Gy0aUGdru+",
	"w2H3CgToups9OEUWLQ4o0BfenrfdA65fyJa/Q0FyHjgznCdppChevUggSxzyzz9//2eS80rrYKuHbWRT",
	"R2u80pxOF1mQf2z2afcBouxjj+AeItRA/AdDZ//ryOkQo0cNbGsNjaBP+gZBulbR6KCHtIZm9619RLTj",
	"imYbnSMbWijPUw4lhn3InuoRfGCYqG3Bw4JPEmzyJ5Ddt7TGM625+ri9rlW0p9utLW2noh1gYkGqNUSD",
	"WAfH/jd4/1eoQ1mXK9DuIHMLQQfbSp50sE2RzX+I0dMhCFKkN/mv/uA6pOg2NSyknAL6pI8civSnDiJt",
	"PfSgYdO79eAhw6boUDCaIAeRF5CxKOczaXP1+0qdbXhZBIfAASZAdGPyHipgwUT2Ie2C5/1a7W7nHliq",
	"1W7lZT1Fh5gMUqCYgzUe/vIMiK2eiSiSONB0HiObIlSAE9JagAOE9H3YOYqz4a6SDRWNQMo+xXvl31dA",
	"7c5HYBEwvtb8vmz3E1iq3QJxOSw0VUziU50STQ+h06XwMD7+plAI0u8GRRb/6a8JOtAa2l9VA2VWdTVZ",
	"NfJYMCQkBA7Y39Lsi3aueFQxwLgo9ZWhk5swgdf7LvBUREkAdUaZb7zPlNVc4SowvqbpZqECPCQBE/lQ",
	"qteUisO3CI1notudZHKmpkvc8YQ2Hmm4lF434aFh+xoavYRMmENK6ZkYpubRrFHk0CXtuCK+Xwp9X9eO",
	"dypazzW3nT4hyKab/M9aRTOcNehQrXEATQd5zWoVjcIj9wOm0HSbHwvIqvVkLqBJC8U7c6lKFXTWJo1f",
	"T3u6EoT5V0LGmKGrEYYtpPYQhB0zCgixbPoUEjyCXxGSM4We6QpOOSOt0xiKz3AeGrosVPsYmwhyJWNx",
	"e2TYhyu4H/KwpOedLiZ0NWNyfb7+hfjVdxDJYgFz0bYNJnseWmOgiGjjGDYks5OD2Xzty/U3u7KeyrNe",
	"eRtavt+UxcKgdbtI55gU6RwXcKZ9d8dvfGBiSFURDgk7ywUsaHGXfQQcZ0MyyT4nureYf4Cm2kQv1Wo1",
	"Fczk9U0y+aINMFholxsD2V1ikrvLREc35pbcA6Kt/+dH8gh54JJOuBxE5KM+YqR8hkuMio7vT3gnEybT",
	"CH0LqpaCymLS4v8+hTjsD47nf8XXfXw3TASWyVZw8mCZ26GZtEMBKOZ2aG6HEu1QABO1HZrbmukJatm2",
	"Jry2ZdkaN/cXJ7H0ODg7y5gba/li2ZyBqdd2jHpAiJXNDjWSqgLJQXxmt/OMyUxmTBzcMaC5ZthHZSdU",
	"Rk29SqXEzIphDqVWpmiUrxIl4ShZIwb5qrnU3Xipy0RDUmI8DAW1461VggUorcARXZ8IHMKUBE5wDs9f",
	"Bk64G+FiAXwA3DYhZ3rycwygFaZLRwewb1LACy9B3xLwVKDKwaKPlAwKgy8p2CLoEL0EXUp7TqNaXa7v",
	"Y2LXO1hHdxwTdo7udLBVpQha1Wfw9q+bt/+hdvvnuzt/kw+am66ai2BRrkfllFVRsVLJai9/N6LAla9p",
	"UAIbERTxGneYC93ChYKimf1e4DLnNlCy8R1dIFJ3nIxQIZl8FaSwFSp5u4DhNDsd1KNIV6PccO4btuF0",
	"k363kP0kXJYqaW/BzGXbRpqj9FjCHIvE+GJH12PkOGr3tCTDLkEsMZnmumvpOR+vVe501dimNYdgt/Vk",
	"uM18Oi+GgGTrylsCSzQFe/HNc7W9zE0wUqLNZ9BOOmISAoJg72N2JBDeJ8n0sIujgkHE6Oq73KAgeVdf",
	"ESiFtWzBwsuIGrLIiJH02yS0m0Mh7Tvyvtyt1t8/bW0/0Spac2Wltck+rDTXV1prWkXbbK2vttcfsK82",
	"Hm+utZ60cuzcLV+FvkdHbJq1nAwulJnZiGib8fMaUocZcazS4AVat0SDF3TqtQGMOcCCLwubPHdSyh2c",
	"IxoUZdzni2dSJ26LSlR+W6u+BPOP99vr7e2H/KMQ59bqiLvutxEkna7QT65pSmWYu/XuuKI9VaYZR7Ap",
	"yIKGqdRnBWtHnn517hNsleyGSr0/waW78VulbxSOWqjiPMmmW+q9IE/yuP2bI0bJ4ulJcHSczHhJdpMJ",
	"XRBzRNSIbQ74sRCoW4atRbcH+2KWeMonUB+8qUJU39cxo8QnSjx/FN5jOjv1E0ZXktVN56yUP845jlNW",
	"1d8HWzamjGIu9yhqQdo6PK4UTwqRJeoHR9Z9M+xXMo8IdfrEoINt1lQQ1WTKy/Mt9hEkiNz3mPF3v2QB",
	"TJj1rCnYwiYSoTu6BzzO8/F5Oo73EjCwS2mPMWud9WuONRZf3RxDbXxqIzLWSFvIwX3SQbyn7CEZdw37",
	"AMexulwHFrQNigHsGYCtqHjaoAzZ2nL9tvj5NuwZWkV7gYgjHly6U7tTY5PBPWSzHxvaXf4VgwHt8tWr",
	"wj7tsg+HQpEwuPlRkvYA0Sb7ncdPPWw7YsnrtVoEjrDXM40Of7D6KzcnIuCUBTbvRC1nQHjiG48Y8cu1",
	"pThPntqMbkyMXyM9BEx+vkfGybOd452K5vQtC5KB1mDsMQ4GAHY6yHEAxUeIWV4Rsjzj53u1HdYhZ0x1",
	"uZ7Fm+V6lDt3VQQ/xi+QDjYRsSCbvzkACxuPbrH53a3V483v476t+00yWQAWmpttwKfmrgI4gIaJ9FuC",
	"Of7sl+tgg1FdBwsE6QZBHYp0QDFYroPmZvtWKiuqHWiaXvYknScrXssYb+qqA7KCEkbHAcE2BV1soQJr",
	"r5ieRypYcBccEyDMIugzUYW2DgiifWILDCTMPFztTZrzStBqTEkZf2uBWoxCXHqAKICmCToy2d7kpbkI",
	"FsgRfRIDHnptmGYh0EIUEYeLYpgUCo8Q2GP/7wFu+cCCZdjgHliq8DwAT+NWgFfevQfq/CiwwZ79pI/I",
	"QAtO58Ej5GlVKEDCH9Ia9VquvZhR2pwjoydoA4uAmUmPRAYVBeGenk+ksCeyCgoKRyPwwDApImB/AFyn",
	"Z5cnZZRDyw0CAsYaVMqgJQ8cazTW4A7PdbDBvRrJws/W2o9aP0tiuXggNGzUB9uZoC2Ln0EtIo7dQIg8",
	"YfTlaoe5bthRSN8mdmTxc7Nav8D6oOxpuWHscbimQkkfHU+epwkuQtMkCOoDgF4aDnXAfp+CNvjUME3g",
	"EQQGuM+0ZF2YkinQJPikC/tVi9uvtv0CmobuJyD32VqV7+gIMgAENvrUw5YaWlzLYxFgJWp4zCOagtp9",
	"L0u7782odhctfRW/NxkVvzMNbyGaMM7pMTA8Lsfx6PkewMYUHDAvVaHNLGjYnMleOdi7qgEsEGjr2JK9",
	"LY6sAITVV17NYdfQjyVIhum4+qeLq//5DAxPf3/5p3dXf/yv4R/fDL95DYZv31yfXgxPzsDw5N3w3enV",
	"6zMw/OLz4dkJuP765Oq7s+vTk+HbCzB8d3b5px+uXv/n1Ve/u/rqP+5oFTXkV4IqyRz8E/ZvwrUmPiIL",
	"U4MBJWBoUROkMPk/ZTnbH/ilO7WoiTLGrncLT6p3Hy4uzJ386Tj57golutry7yW5+AJF6UN6v38wUcUk",
	"Hf7Es8Ypfr/sv0m506j75kUF7h4tX1ABJrrHug6yKXDT0JKYC6pAILDp0UNcvCcRRCjvVsgVSyxNiIbp",
	"u++s0c/jjWAoiCmEkpCTH4FKOiJURqD6KuxyZVkClVeksNsZ5nqWRDgjE50DDj47mBuTZN0fh1cqauTz",
	"hnhcR0SXnamG9mq+xcckvwcgbR6YewBzD2DuASg2x0zMA8Ak8AAioo1JIUsfFuNJWfrY7RXvwdJHj8/f",
	"MEsvQSIdESpln8vSS1C5KZY+ExOTsPTSSo1v6eXOVJY+efHl+1LTl33Tazm389Ow84az2zV0lDBu8Gss",
	"wyXdJZHce5D6V/Xu/lqqRZcyT6ohw2m8aWqH4tcMyAY9f6V9NAPfC6QuItC+PCrlOacu9zrJTmXzDRJJ",
	"SdhJqfipqGGXZalJVRhZjyQtKy0K30/V6caHXVxc33jSWlxsgMVFr7y7uMhV0OJisP2CfUUQIKhnwg7S",
	"wacG7QLaRdzWYxs5ADy3g778Sga4/vZsePL99bdfg+F355ffX/ASyNnJ1fn51es3V19+DS7/+/+GfzgH",
	"4hz95fln4Pr0YvjuLCh8iJ6Te+TjnV4Mvzq7/uLs8n9/HH77GRj++eL6N27dhfW5dHl+BoZvL4ZffM77",
	"ixVTNhl3ZhCFk/J9w1dITLlgrrgmJaaonro5w9nxfKX9llE1KYiNSOVISrIKwzc1qYU2tG15+FaSierV",
	"n0/8P65PPRl6bgdSc3365vLHcyaEvA75zjeG3j4qJjCX559fnn8uyw24+pfvr757e/X6zfBfL4b/9jv2",
	"/+lf5CHyCZV0FdWNFy9prh+giAVQbIQUKtPawx/Ohr/9fQgfw5N311+8ZZj6978MT34c/uFrrmrlXmQ1",
	"XayXRLM5/OY3V/98Pnx7cf3lj9en7yI19G9+O/zyhwCgRWTaXTsEMAGrCHp/WdHwI13Go69rUO4UWFzc",
	"2lhrLS4+f/7cZv/8Uzd7fN/5Ht8PqpCvB4iGziTNY6FpxELzaKVYtKI+kTy5WIWERcKTz5CkpCchI0I1",
	"CTMRv+9jyunH2MGbmcs9ggX3pDLY2ALioPKtMfYXygfzE1ERVdnRwDWv3t745XprK6/ezg40YvdXfGiJ",
	"zWy0lR1OSyOmZTRTHAARacusj4bZcZWSFGOPZt+5/zyrSJmoTnw/cWk2SmcvKk0xiG5UOrriq0J+T1lK",
	"IJqMbOEnC2gD2oUUEGQy3onUkTRWPuCLK9PmivLDSowIAI0DQXGN1VgQ9D4jVB4cxY1ZN1kbx98nOtfG",
	"44iCAPJYotBF7vtXRpGEUtHPKZnr4g8LgGzRAHSvHo06tu7dnwUh6e7v6ogX0qYnracHT7GdcCUg6iar",
	"6ZTXHs8V9ljy4nI2JCnQGUNSMClDUsr0qkXS+icuKZjMJWVikoJJuqSI8/CueFRfiT93xVn41C0j8mE2",
	"8XlbHKDPgLB7Yj96HI0LE1tcaNgOcBsJMoBhA++GJxZMSKfgFfAPzSDPIcDg7qX5gc2yqzbB9Qz+Au4F",
	"7GILspd6T8Pu/mCX6dpd/4YvJXFiZX362J/gH6Ovfkhe54BKCg/BaFR6dacpEOmfgh2NUr9cVRaps3x2",
	"NrR3azukevYHwFcSnoIULVzVyICXuhWWi9YIVd9sLTKzdd89/kCgR259wNce+LcjjlgLzdyNbZqg70LE",
	"A5iATHr504PVJJww6bLRKRc8A27fpGMW/MVs8eX11UdV3C3m26/qK+/TcaZm+Zg/uu62Xw8sYPYpC8lc",
	"5vd/ytp26w+exHxvKombbMXMgTSLZAZnbW3mT9yEwylpAlR29ZbfVTnWQRQeIUcLtpL28yJvRYg8/RWb",
	"jJ59P0XUNJh8iJt6MzUsT+8k7PNL0gbp2/YmgbPK3C/M7xd6p5ZyhEUHhq0Di6kNpAOCzVASxAELzbU1",
	"YDiAN2uurSXRxe+AVtKlNdfWpDugH7fWn2xsaRX+odXSKvz3nSzKxFsgonvj0MueiXWkNXholRC4ee+P",
	"UNCmfBmMIGx35WFr5RF/nYT7xf1Wa/UXzZVHWkVb3VhvBa+N2ZHerJHykplR+rXgy7bo+m8rmmXY7h9L",
	"ipv4HTrglxVbkBLjpTZ5U5pwpfYMWNfMTVHcuIZwnmRpRd/khTo2Xa6Dx8319pMN0Nxsg9XWx2C7tfUx",
	"v/66T0z34mmnUa3CnnFHRy/uLNfFRdL8TZVaHPPhDlM6K9bR2sZKcw08EYAMOmtUqybuQLOLHdq4W6vV",
	"tOOd4/8PAAD//0WCkzublQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
