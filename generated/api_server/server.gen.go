// Package api_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api_server

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/lib/pq"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AdminUserScopes  = "AdminUser.Scopes"
	NormalUserScopes = "NormalUser.Scopes"
	OwnerUserScopes  = "OwnerUser.Scopes"
)

// Defines values for AuthGetRole.
const (
	AuthGetRoleADMIN AuthGetRole = "ADMIN"
	AuthGetRoleUSER  AuthGetRole = "USER"
)

// Defines values for ReservationGetStatus.
const (
	ReservationGetStatusACCEPT   ReservationGetStatus = "ACCEPT"
	ReservationGetStatusCANCEL   ReservationGetStatus = "CANCEL"
	ReservationGetStatusCOMPLETE ReservationGetStatus = "COMPLETE"
	ReservationGetStatusPENDING  ReservationGetStatus = "PENDING"
	ReservationGetStatusREQUEST  ReservationGetStatus = "REQUEST"
)

// Defines values for ReservationUpdateBodyStatus.
const (
	ACCEPTED  ReservationUpdateBodyStatus = "ACCEPTED"
	CANCELED  ReservationUpdateBodyStatus = "CANCELED"
	FINISHED  ReservationUpdateBodyStatus = "FINISHED"
	REQUESTED ReservationUpdateBodyStatus = "REQUESTED"
)

// Defines values for UserGetRole.
const (
	UserGetRoleADMIN UserGetRole = "ADMIN"
	UserGetRoleUSER  UserGetRole = "USER"
)

// Defines values for UsersCreateBodyRole.
const (
	ADMIN UsersCreateBodyRole = "ADMIN"
	USER  UsersCreateBodyRole = "USER"
)

// Defines values for RoleQuery.
const (
	RoleQueryALL    RoleQuery = "ALL"
	RoleQueryMENTEE RoleQuery = "MENTEE"
	RoleQueryMENTOR RoleQuery = "MENTOR"
)

// Defines values for GetUsersIdReservationsParamsRole.
const (
	GetUsersIdReservationsParamsRoleALL    GetUsersIdReservationsParamsRole = "ALL"
	GetUsersIdReservationsParamsRoleMENTEE GetUsersIdReservationsParamsRole = "MENTEE"
	GetUsersIdReservationsParamsRoleMENTOR GetUsersIdReservationsParamsRole = "MENTOR"
)

// Defines values for GetUsersIdReservationsParamsStatus.
const (
	GetUsersIdReservationsParamsStatusACCEPT         GetUsersIdReservationsParamsStatus = "ACCEPT"
	GetUsersIdReservationsParamsStatusCANCEL         GetUsersIdReservationsParamsStatus = "CANCEL"
	GetUsersIdReservationsParamsStatusDONE           GetUsersIdReservationsParamsStatus = "DONE"
	GetUsersIdReservationsParamsStatusMENTEECHECKED  GetUsersIdReservationsParamsStatus = "MENTEE_CHECKED"
	GetUsersIdReservationsParamsStatusMENTEEFEEDBACK GetUsersIdReservationsParamsStatus = "MENTEE_FEEDBACK"
	GetUsersIdReservationsParamsStatusREQUEST        GetUsersIdReservationsParamsStatus = "REQUEST"
)

// AuthGet defines model for AuthGet.
type AuthGet struct {
	// Id required
	Id *float32 `json:"id,omitempty"`

	// Nickname required
	Nickname *string `json:"nickname,omitempty"`

	// ProfileImage required
	ProfileImage *string      `json:"profileImage,omitempty"`
	Role         *AuthGetRole `json:"role,omitempty"`
}

// AuthGetRole defines model for AuthGet.Role.
type AuthGetRole string

// CategoryGet defines model for CategoryGet.
type CategoryGet struct {
	Id   *int32  `db:"id" json:"id,omitempty"`
	Name *string `db:"name" json:"name,omitempty"`
}

// HashtagCreate defines model for HashtagCreate.
type HashtagCreate struct {
	// Name required, 0 < len < 20
	Name string `json:"name"`
}

// HashtagGet defines model for HashtagGet.
type HashtagGet struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// HashtagId defines model for HashtagId.
type HashtagId struct {
	Id *int32 `db:"id" json:"id,omitempty"`
}

// HashtagPagination defines model for HashtagPagination.
type HashtagPagination struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// HashtagUpdateBody defines model for HashtagUpdateBody.
type HashtagUpdateBody struct {
	Id int32 `json:"id"`
}

// HomeGet defines model for HomeGet.
type HomeGet struct {
	Categories       *[]CategoryGet  `json:"categories,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	Description      *string         `json:"description,omitempty"`
	Hashtags         *[]HashtagGet   `json:"hashtags,omitempty"`
	Id               *int32          `json:"id,omitempty"`
	IsHide           *bool           `json:"isHide,omitempty"`
	MentoringCount   *int            `json:"mentoringCount,omitempty"`
	ShortDescription *string         `json:"shortDescription,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
	User             *HomeSimpleUser `json:"user,omitempty"`
}

// HomeSimpleUser defines model for HomeSimpleUser.
type HomeSimpleUser struct {
	Id           *int32  `json:"id,omitempty"`
	Nickname     *string `json:"nickname,omitempty"`
	ProfileImage *string `json:"profileImage,omitempty"`
}

// MenteeFeedbackCreate defines model for MenteeFeedbackCreate.
type MenteeFeedbackCreate struct {
	// Content optional, 0 < len < 1000
	Content *string `json:"content,omitempty"`

	// MenteeId required, mentee id
	MenteeId int32 `json:"menteeId"`

	// MentorId required, mentor id
	MentorId int32 `json:"mentorId"`

	// Rating required, 0 <= rating <= 5
	Rating float32 `json:"rating"`

	// ReservationId required, reservation id
	ReservationId int32 `json:"reservationId"`
}

// MenteeFeedbackGet defines model for MenteeFeedbackGet.
type MenteeFeedbackGet struct {
	Content       *string    `db:"content" json:"content,omitempty"`
	CreatedAt     *time.Time `db:"created_at" json:"createdAt,omitempty"`
	Id            *int32     `db:"id" json:"id,omitempty"`
	MenteeId      *int32     `db:"mentee_id" json:"menteeId,omitempty"`
	MentorId      *int32     `db:"mentor_id" json:"mentorId,omitempty"`
	Rating        *float32   `db:"rating" json:"rating,omitempty"`
	ReservationId *int32     `db:"reservation_id" json:"reservationId,omitempty"`
	UpdatedAt     *time.Time `db:"updated_at" json:"updatedAt,omitempty"`
}

// MenteeFeedbackPagintaion defines model for MenteeFeedbackPagintaion.
type MenteeFeedbackPagintaion struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// MentorFeedbackCreate defines model for MentorFeedbackCreate.
type MentorFeedbackCreate struct {
	// Content optional, 0 < len < 1000
	Content *string `json:"content,omitempty"`

	// MenteeId required, mentee id
	MenteeId int32 `json:"menteeId"`

	// MentorId required, mentor id
	MentorId int32 `json:"mentorId"`

	// Rating required, 0 <= rating <= 5
	Rating float32 `json:"rating"`

	// ReservationId required, reservation id
	ReservationId int32 `json:"reservationId"`
}

// MentorFeedbackGet defines model for MentorFeedbackGet.
type MentorFeedbackGet struct {
	CreatedAt     *time.Time `db:"created_at" json:"createdAt,omitempty"`
	Id            *int32     `db:"id" json:"id,omitempty"`
	MenteeId      *int32     `db:"mentee_id" json:"menteeId,omitempty"`
	MentorId      *int32     `db:"mentor_id" json:"mentorId,omitempty"`
	Rating        *float32   `db:"rating" json:"rating,omitempty"`
	ReservationId *int32     `db:"reservation_id" json:"reservationId,omitempty"`
	UpdatedAt     *time.Time `db:"updated_at" json:"updatedAt,omitempty"`
}

// MentorFeedbackPagintaion defines model for MentorFeedbackPagintaion.
type MentorFeedbackPagintaion struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// MentorProfileActivationBody defines model for MentorProfileActivationBody.
type MentorProfileActivationBody struct {
	IsHide *bool `json:"isHide,omitempty"`
}

// MentorProfileGet defines model for MentorProfileGet.
type MentorProfileGet struct {
	Categories       *pq.StringArray `json:"categories,omitempty"`
	CreatedAt        *time.Time      `db:"created_at" json:"createdAt,omitempty"`
	Description      *string         `db:"description" json:"description,omitempty"`
	Hashtags         *pq.StringArray `json:"hashtags,omitempty"`
	Id               *int32          `db:"id" json:"id,omitempty"`
	IsHide           *bool           `db:"isHide" json:"isHide,omitempty"`
	MentoringCount   *int            `db:"mentoring_count" json:"mentoringCount,omitempty"`
	ShortDescription *string         `db:"shortDescription" json:"shortDescription,omitempty"`
	SocialLink       *string         `db:"socialLink" json:"socialLink,omitempty"`
	UpdatedAt        *time.Time      `db:"updated_at" json:"updatedAt,omitempty"`
	User             *struct {
		Id           *int32  `db:"id" json:"id,omitempty"`
		Nickname     *string `db:"nickname" json:"nickname,omitempty"`
		ProfileImage *string `db:"profile_image" json:"profileImage,omitempty"`
	} `json:"user,omitempty"`
	UserId *int32 `db:"user_id" json:"userId,omitempty"`
}

// MentorProfilePagintaion defines model for MentorProfilePagintaion.
type MentorProfilePagintaion struct {
	Content *interface{} `json:"content,omitempty"`
	Page    *Page        `json:"page,omitempty"`
}

// MentorProfileSimpleGet defines model for MentorProfileSimpleGet.
type MentorProfileSimpleGet struct {
	Categories       *pq.StringArray `json:"categories,omitempty"`
	CreatedAt        *time.Time      `db:"created_at" json:"createdAt,omitempty"`
	Description      *string         `db:"description" json:"description,omitempty"`
	Hashtags         *pq.StringArray `json:"hashtags,omitempty"`
	Id               *int32          `db:"id" json:"id,omitempty"`
	IsHide           *bool           `db:"isHide" json:"isHide,omitempty"`
	MentoringCount   *int            `db:"mentoring_count" json:"mentoringCount,omitempty"`
	ShortDescription *string         `db:"shortDescription" json:"shortDescription,omitempty"`
	SocialLink       *string         `db:"socialLink" json:"socialLink,omitempty"`
	UpdatedAt        *time.Time      `db:"updated_at" json:"updatedAt,omitempty"`
}

// MentorProfileUpdateBody defines model for MentorProfileUpdateBody.
type MentorProfileUpdateBody struct {
	// Categories optional
	Categories *[]struct {
		Id *int32 `json:"id,omitempty"`
	} `json:"categories,omitempty"`

	// Description 0 <= len < 1000
	Description *string `json:"description,omitempty"`

	// Hashtags number of hashtag <= 5
	Hashtags *[]struct {
		Id *int32 `json:"id,omitempty"`
	} `json:"hashtags,omitempty"`

	// IsHide default false
	IsHide *bool `json:"isHide,omitempty"`

	// ShortDescription 0 <= len < 50
	ShortDescription *string `json:"shortDescription,omitempty"`

	// SocialLink optional, regex https://42born2code.slack.com/team/[a-zA-Z0-9_]+
	SocialLink *string `json:"socialLink,omitempty"`
}

// Page defines model for Page.
type Page struct {
	CurrentPage *int32 `db:"current_page" json:"currentPage,omitempty"`
	IsLast      *bool  `db:"is_last" json:"isLast,omitempty"`
	Page        *int32 `db:"page" json:"page,omitempty"`
	Take        *int32 `db:"take" json:"take,omitempty"`
	TotalPage   *int32 `db:"total_page" json:"totalPage,omitempty"`
}

// ReservationCancelBody defines model for ReservationCancelBody.
type ReservationCancelBody struct {
	// Content Reason for Cancellation, (length <= 100)
	Content *string `json:"content,omitempty"`
}

// ReservationCancelReason defines model for ReservationCancelReason.
type ReservationCancelReason struct {
	Content         *string    `db:"content" json:"content,omitempty"`
	CreatedAt       *time.Time `db:"created_at" json:"createdAt,omitempty"`
	RequestedUserId *int32     `db:"requested_user_id" json:"requestedUserId,omitempty"`
	ReservationId   *int32     `db:"reservation_id" json:"reservationId,omitempty"`
}

// ReservationCompleteMenteeBody defines model for ReservationCompleteMenteeBody.
type ReservationCompleteMenteeBody struct {
	// Content reservation feedback, (length <= 300)
	Content *string `json:"content,omitempty"`

	// Rating rating, 0.5 * n, (0 <= n < 10)
	Rating *float32 `json:"rating,omitempty"`
}

// ReservationCompleteMentorBody defines model for ReservationCompleteMentorBody.
type ReservationCompleteMentorBody struct {
	// Rating rating, 0.5 * n, (0 <= n < 10)
	Rating *float32 `json:"rating,omitempty"`
}

// ReservationCreateBody defines model for ReservationCreateBody.
type ReservationCreateBody struct {
	// CategoryId required, category id
	CategoryId *int32 `json:"categoryId,omitempty"`

	// Hashtags number of hashtag <= 5
	Hashtags *[]HashtagId `json:"hashtags,omitempty"`

	// MenteeId required, mentee id
	MenteeId int32 `json:"menteeId"`

	// MentorId required, mentor id
	MentorId int32 `json:"mentorId"`

	// RequestMessage optional, request message `length <= 1000`
	RequestMessage *string `json:"requestMessage,omitempty"`
}

// ReservationGet defines model for ReservationGet.
type ReservationGet struct {
	CancelReason *ReservationCancelReason `json:"cancelReason,omitempty"`
	Category     *CategoryGet             `json:"category,omitempty"`
	CreatedAt    *time.Time               `db:"created_at" json:"createdAt,omitempty"`
	Hashtags     *pq.StringArray          `json:"hashtags,omitempty"`

	// Id reservation id
	Id             *int32                `db:"id" json:"id,omitempty"`
	MenteeFeedback *MenteeFeedbackGet    `json:"menteeFeedback,omitempty"`
	MenteeId       *int32                `db:"mentee_id" json:"menteeId,omitempty"`
	MentorFeedback *MentorFeedbackGet    `json:"mentorFeedback,omitempty"`
	MentorId       *int32                `db:"mentor_id" json:"mentorId,omitempty"`
	RequestMessage *string               `db:"request_message" json:"requestMessage,omitempty"`
	Status         *ReservationGetStatus `db:"status" json:"status,omitempty"`
	UpdatedAt      *time.Time            `db:"updated_at" json:"updatedAt,omitempty"`
}

// ReservationGetStatus defines model for ReservationGet.Status.
type ReservationGetStatus string

// ReservationUpdateBody defines model for ReservationUpdateBody.
type ReservationUpdateBody struct {
	// CategoryId optional, category id
	CategoryId *int32 `json:"categoryId,omitempty"`

	// Hashtags optional, hashtags item max 5
	Hashtags *[]HashtagUpdateBody `json:"hashtags,omitempty"`

	// RequestMessage optional, request message
	RequestMessage *string `json:"requestMessage,omitempty"`

	// Status optional, status
	Status *ReservationUpdateBodyStatus `json:"status,omitempty"`
}

// ReservationUpdateBodyStatus optional, status
type ReservationUpdateBodyStatus string

// UserGet defines model for UserGet.
type UserGet struct {
	CreatedAt     *time.Time              `db:"created_at" json:"createdAt,omitempty"`
	Email         *openapi_types.Email    `db:"email" json:"email,omitempty"`
	Id            *int32                  `db:"id" json:"id,omitempty"`
	MentorProfile *MentorProfileSimpleGet `json:"mentorProfile,omitempty"`
	Nickname      *string                 `db:"nickname" json:"nickname,omitempty"`
	ProfileImage  *string                 `db:"profile_image" json:"profileImage,omitempty"`

	// Role required
	Role      *UserGetRole `db:"role" json:"role,omitempty"`
	UpdatedAt *time.Time   `db:"updated_at" json:"updatedAt,omitempty"`
}

// UserGetRole required
type UserGetRole string

// UserReservationPagination defines model for UserReservationPagination.
type UserReservationPagination struct {
	Content *[]ReservationGet `json:"content,omitempty"`
	Page    *Page             `json:"page,omitempty"`
}

// UsersCreateBody only for admin
type UsersCreateBody struct {
	// Email required
	Email *openapi_types.Email `json:"email,omitempty"`

	// Nickname required
	Nickname *string `json:"nickname,omitempty"`

	// ProfileImage required
	ProfileImage *string `json:"profileImage,omitempty"`

	// Role required
	Role *UsersCreateBodyRole `json:"role,omitempty"`
}

// UsersCreateBodyRole required
type UsersCreateBodyRole string

// UsersUpdateBody defines model for UsersUpdateBody.
type UsersUpdateBody struct {
	// ProfileImage optional
	ProfileImage *string `json:"profileImage,omitempty"`
}

// CategoryIdQuery defines model for CategoryIdQuery.
type CategoryIdQuery = int32

// CategoryPath defines model for CategoryPath.
type CategoryPath = int

// HashtagIdQuery defines model for HashtagIdQuery.
type HashtagIdQuery = int32

// HashtagSearchQuery defines model for HashtagSearchQuery.
type HashtagSearchQuery = string

// IdPath defines model for IdPath.
type IdPath = int32

// IsHideQuery defines model for IsHideQuery.
type IsHideQuery = bool

// MenteeIdQuery defines model for MenteeIdQuery.
type MenteeIdQuery = int32

// MentorIdQuery defines model for MentorIdQuery.
type MentorIdQuery = int32

// PageQuery defines model for PageQuery.
type PageQuery = int32

// ProfileIdQuery defines model for ProfileIdQuery.
type ProfileIdQuery = int32

// ReservationIdQuery defines model for ReservationIdQuery.
type ReservationIdQuery = int32

// ReservationPath defines model for ReservationPath.
type ReservationPath = int32

// RoleQuery defines model for RoleQuery.
type RoleQuery string

// SearchStringPath defines model for SearchStringPath.
type SearchStringPath = string

// StatusQuery defines model for StatusQuery.
type StatusQuery = []string

// TakeQuery defines model for TakeQuery.
type TakeQuery = int32

// UserPath defines model for UserPath.
type UserPath = int32

// GetHashtagsParams defines parameters for GetHashtags.
type GetHashtagsParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`

	// ProfileId filter by profile_id
	ProfileId *ProfileIdQuery `form:"profile_id,omitempty" json:"profile_id,omitempty"`

	// ReservationId filter by reservation_id
	ReservationId *ReservationIdQuery `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// Search search by hashtag (%LIKE%)
	Search *HashtagSearchQuery `form:"search,omitempty" json:"search,omitempty"`
}

// GetHomeParams defines parameters for GetHome.
type GetHomeParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`
}

// GetHomeCategoryIdParams defines parameters for GetHomeCategoryId.
type GetHomeCategoryIdParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`
}

// GetMenteeFeedbacksParams defines parameters for GetMenteeFeedbacks.
type GetMenteeFeedbacksParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`

	// ReservationId filter by reservation_id
	ReservationId *ReservationIdQuery `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// MentorId filter by mentor_id
	MentorId *MentorIdQuery `form:"mentor_id,omitempty" json:"mentor_id,omitempty"`

	// MenteeId filter by mentee_id
	MenteeId *MenteeIdQuery `form:"mentee_id,omitempty" json:"mentee_id,omitempty"`
}

// GetMentorFeedbacksParams defines parameters for GetMentorFeedbacks.
type GetMentorFeedbacksParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`

	// ReservationId filter by reservation_id
	ReservationId *ReservationIdQuery `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// MentorId filter by mentor_id
	MentorId *MentorIdQuery `form:"mentor_id,omitempty" json:"mentor_id,omitempty"`

	// MenteeId filter by mentee_id
	MenteeId *MenteeIdQuery `form:"mentee_id,omitempty" json:"mentee_id,omitempty"`
}

// GetMentorProfilesParams defines parameters for GetMentorProfiles.
type GetMentorProfilesParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`

	// IsHide filter by is_hide
	IsHide *IsHideQuery `form:"is_hide,omitempty" json:"is_hide,omitempty"`

	// HashtagId filter by hashtag
	HashtagId *HashtagIdQuery `form:"hashtag_id,omitempty" json:"hashtag_id,omitempty"`

	// CategoryId filter by category
	CategoryId *CategoryIdQuery `form:"category_id,omitempty" json:"category_id,omitempty"`
}

// GetReservationsParams defines parameters for GetReservations.
type GetReservationsParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`

	// HashtagId filter by hashtag
	HashtagId *HashtagIdQuery `form:"hashtag_id,omitempty" json:"hashtag_id,omitempty"`

	// CategoryId filter by category
	CategoryId *CategoryIdQuery `form:"category_id,omitempty" json:"category_id,omitempty"`
}

// GetSearchMentorSearchStringParams defines parameters for GetSearchMentorSearchString.
type GetSearchMentorSearchStringParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`

	// SearchByUserNickname search by nickname `default = true`
	SearchByUserNickname *string `form:"search_by_user_nickname,omitempty" json:"search_by_user_nickname,omitempty"`

	// SearchByHashtagName search by tag name `default = true`
	SearchByHashtagName *string `form:"search_by_hashtag_name,omitempty" json:"search_by_hashtag_name,omitempty"`

	// SearchByCategoryName search by category name `default = true`
	SearchByCategoryName *string `form:"search_by_category_name,omitempty" json:"search_by_category_name,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`
}

// GetUsersIdReservationsParams defines parameters for GetUsersIdReservations.
type GetUsersIdReservationsParams struct {
	// Take take `take` per page (min = 1, max = 100, default = 20)
	Take TakeQuery `form:"take" json:"take"`

	// Page page to skip (>= 0)
	Page PageQuery `form:"page" json:"page"`

	// Role find matched role reservations (ALL is find ALL)
	Role *GetUsersIdReservationsParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// Status find matched status reservations
	Status *StatusQuery `form:"status,omitempty" json:"status,omitempty"`
}

// GetUsersIdReservationsParamsRole defines parameters for GetUsersIdReservations.
type GetUsersIdReservationsParamsRole string

// GetUsersIdReservationsParamsStatus defines parameters for GetUsersIdReservations.
type GetUsersIdReservationsParamsStatus string

// PostHashtagsJSONRequestBody defines body for PostHashtags for application/json ContentType.
type PostHashtagsJSONRequestBody = HashtagCreate

// PostMenteeFeedbacksJSONRequestBody defines body for PostMenteeFeedbacks for application/json ContentType.
type PostMenteeFeedbacksJSONRequestBody = MenteeFeedbackCreate

// PostMentorFeedbacksJSONRequestBody defines body for PostMentorFeedbacks for application/json ContentType.
type PostMentorFeedbacksJSONRequestBody = MentorFeedbackCreate

// PatchMentorProfilesIdJSONRequestBody defines body for PatchMentorProfilesId for application/json ContentType.
type PatchMentorProfilesIdJSONRequestBody = MentorProfileUpdateBody

// PatchMentorProfilesIdActivationJSONRequestBody defines body for PatchMentorProfilesIdActivation for application/json ContentType.
type PatchMentorProfilesIdActivationJSONRequestBody = MentorProfileActivationBody

// PostReservationsJSONRequestBody defines body for PostReservations for application/json ContentType.
type PostReservationsJSONRequestBody = ReservationCreateBody

// PatchReservationsIdJSONRequestBody defines body for PatchReservationsId for application/json ContentType.
type PatchReservationsIdJSONRequestBody = ReservationUpdateBody

// PatchReservationsIdCancelJSONRequestBody defines body for PatchReservationsIdCancel for application/json ContentType.
type PatchReservationsIdCancelJSONRequestBody = ReservationCancelBody

// PatchReservationsIdMenteeCompletionJSONRequestBody defines body for PatchReservationsIdMenteeCompletion for application/json ContentType.
type PatchReservationsIdMenteeCompletionJSONRequestBody = ReservationCompleteMenteeBody

// PatchReservationsIdMentorCompletionJSONRequestBody defines body for PatchReservationsIdMentorCompletion for application/json ContentType.
type PatchReservationsIdMentorCompletionJSONRequestBody = ReservationCompleteMentorBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UsersCreateBody

// PatchUsersIdJSONRequestBody defines body for PatchUsersId for application/json ContentType.
type PatchUsersIdJSONRequestBody = UsersUpdateBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// verify access token
	// (GET /auth)
	GetAuth(ctx echo.Context) error
	// FT OAuth2 (redirected to FT API)
	// (GET /auth/42)
	GetAuth42(ctx echo.Context) error
	// Google FT callback (verify or create user and return token)
	// (GET /auth/42/callback)
	GetAuth42Callback(ctx echo.Context) error
	// Google OAuth2 (redirected to Google API)
	// (GET /auth/google)
	GetAuthGoogle(ctx echo.Context) error
	// Google OAuth2 callback (verify or create user and return token)
	// (GET /auth/google/callback)
	GetAuthGoogleCallback(ctx echo.Context) error
	// Get all categories
	// (GET /categories)
	GetCategories(ctx echo.Context) error
	// Get all hashtags
	// (GET /hashtags)
	GetHashtags(ctx echo.Context, params GetHashtagsParams) error
	// Create a new hashtag
	// (POST /hashtags)
	PostHashtags(ctx echo.Context) error
	// Get main page mentor profiles (random)
	// (GET /home)
	GetHome(ctx echo.Context, params GetHomeParams) error
	// Get main page mentor profiles by category
	// (GET /home/{category_id})
	GetHomeCategoryId(ctx echo.Context, categoryId CategoryPath, params GetHomeCategoryIdParams) error
	// Get all mentee feedbacks order by recent updated
	// (GET /mentee_feedbacks)
	GetMenteeFeedbacks(ctx echo.Context, params GetMenteeFeedbacksParams) error
	// Create a new mentee feedback
	// (POST /mentee_feedbacks)
	PostMenteeFeedbacks(ctx echo.Context) error
	// Get a mentee feedback by ID
	// (GET /mentee_feedbacks/{id})
	GetMenteeFeedbacksId(ctx echo.Context, id IdPath) error
	// Get all mentor feedbacks
	// (GET /mentor_feedbacks)
	GetMentorFeedbacks(ctx echo.Context, params GetMentorFeedbacksParams) error
	// Create a new mentor feedback
	// (POST /mentor_feedbacks)
	PostMentorFeedbacks(ctx echo.Context) error
	// Get a mentor feedback by ID
	// (GET /mentor_feedbacks/{id})
	GetMentorFeedbacksId(ctx echo.Context, id IdPath) error
	// Get all mentor profiles
	// (GET /mentor_profiles)
	GetMentorProfiles(ctx echo.Context, params GetMentorProfilesParams) error
	// Get a mentor profile by ID
	// (GET /mentor_profiles/{id})
	GetMentorProfilesId(ctx echo.Context, id UserPath) error
	// Update mentor profile
	// (PATCH /mentor_profiles/{id})
	PatchMentorProfilesId(ctx echo.Context, id UserPath) error
	// Activate or Deactivate mentorProfiles
	// (PATCH /mentor_profiles/{id}/activation)
	PatchMentorProfilesIdActivation(ctx echo.Context, id UserPath) error
	// Get all reservations
	// (GET /reservations)
	GetReservations(ctx echo.Context, params GetReservationsParams) error
	// Create a new reservation
	// (POST /reservations)
	PostReservations(ctx echo.Context) error
	// Get a reservation by ID
	// (GET /reservations/{id})
	GetReservationsId(ctx echo.Context, id ReservationPath) error
	// Update reservation
	// (PATCH /reservations/{id})
	PatchReservationsId(ctx echo.Context, id ReservationPath) error
	// accept reservation
	// (PATCH /reservations/{id}/accept)
	PatchReservationsIdAccept(ctx echo.Context, id ReservationPath) error
	// cancel reservation
	// (PATCH /reservations/{id}/cancel)
	PatchReservationsIdCancel(ctx echo.Context, id ReservationPath) error
	// check accepted reservation by mentee
	// (PATCH /reservations/{id}/check)
	PatchReservationsIdCheck(ctx echo.Context, id ReservationPath) error
	// complete reservation as mentee
	// (PATCH /reservations/{id}/mentee_completion)
	PatchReservationsIdMenteeCompletion(ctx echo.Context, id ReservationPath) error
	// complete reservation as mentor
	// (PATCH /reservations/{id}/mentor_completion)
	PatchReservationsIdMentorCompletion(ctx echo.Context, id ReservationPath) error
	// Search mentor by string
	// (GET /search/mentor/{search_string})
	GetSearchMentorSearchString(ctx echo.Context, searchString SearchStringPath, params GetSearchMentorSearchStringParams) error
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Get a user by ID
	// (GET /users/{id})
	GetUsersId(ctx echo.Context, id IdPath) error
	// Update user
	// (PATCH /users/{id})
	PatchUsersId(ctx echo.Context, id IdPath) error
	// Get a user reservations by ID
	// (GET /users/{id}/reservations)
	GetUsersIdReservations(ctx echo.Context, id IdPath, params GetUsersIdReservationsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuth converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuth(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuth(ctx)
	return err
}

// GetAuth42 converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuth42(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuth42(ctx)
	return err
}

// GetAuth42Callback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuth42Callback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuth42Callback(ctx)
	return err
}

// GetAuthGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogle(ctx)
	return err
}

// GetAuthGoogleCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogleCallback(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogleCallback(ctx)
	return err
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategories(ctx)
	return err
}

// GetHashtags converts echo context to params.
func (w *ServerInterfaceWrapper) GetHashtags(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHashtagsParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "profile_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "profile_id", ctx.QueryParams(), &params.ProfileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile_id: %s", err))
	}

	// ------------- Optional query parameter "reservation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "reservation_id", ctx.QueryParams(), &params.ReservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHashtags(ctx, params)
	return err
}

// PostHashtags converts echo context to params.
func (w *ServerInterfaceWrapper) PostHashtags(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostHashtags(ctx)
	return err
}

// GetHome converts echo context to params.
func (w *ServerInterfaceWrapper) GetHome(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHomeParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHome(ctx, params)
	return err
}

// GetHomeCategoryId converts echo context to params.
func (w *ServerInterfaceWrapper) GetHomeCategoryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId CategoryPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHomeCategoryIdParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHomeCategoryId(ctx, categoryId, params)
	return err
}

// GetMenteeFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetMenteeFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMenteeFeedbacksParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "reservation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "reservation_id", ctx.QueryParams(), &params.ReservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	// ------------- Optional query parameter "mentor_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentor_id", ctx.QueryParams(), &params.MentorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentor_id: %s", err))
	}

	// ------------- Optional query parameter "mentee_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentee_id", ctx.QueryParams(), &params.MenteeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentee_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMenteeFeedbacks(ctx, params)
	return err
}

// PostMenteeFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) PostMenteeFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMenteeFeedbacks(ctx)
	return err
}

// GetMenteeFeedbacksId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMenteeFeedbacksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(NormalUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMenteeFeedbacksId(ctx, id)
	return err
}

// GetMentorFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentorFeedbacksParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "reservation_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "reservation_id", ctx.QueryParams(), &params.ReservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	// ------------- Optional query parameter "mentor_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentor_id", ctx.QueryParams(), &params.MentorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentor_id: %s", err))
	}

	// ------------- Optional query parameter "mentee_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "mentee_id", ctx.QueryParams(), &params.MenteeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mentee_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMentorFeedbacks(ctx, params)
	return err
}

// PostMentorFeedbacks converts echo context to params.
func (w *ServerInterfaceWrapper) PostMentorFeedbacks(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMentorFeedbacks(ctx)
	return err
}

// GetMentorFeedbacksId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorFeedbacksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(NormalUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMentorFeedbacksId(ctx, id)
	return err
}

// GetMentorProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMentorProfilesParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "is_hide" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_hide", ctx.QueryParams(), &params.IsHide)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_hide: %s", err))
	}

	// ------------- Optional query parameter "hashtag_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtag_id", ctx.QueryParams(), &params.HashtagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtag_id: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMentorProfiles(ctx, params)
	return err
}

// GetMentorProfilesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMentorProfilesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMentorProfilesId(ctx, id)
	return err
}

// PatchMentorProfilesId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMentorProfilesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchMentorProfilesId(ctx, id)
	return err
}

// PatchMentorProfilesIdActivation converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMentorProfilesIdActivation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchMentorProfilesIdActivation(ctx, id)
	return err
}

// GetReservations converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservations(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReservationsParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "hashtag_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtag_id", ctx.QueryParams(), &params.HashtagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtag_id: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReservations(ctx, params)
	return err
}

// PostReservations converts echo context to params.
func (w *ServerInterfaceWrapper) PostReservations(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReservations(ctx)
	return err
}

// GetReservationsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ReservationPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReservationsId(ctx, id)
	return err
}

// PatchReservationsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ReservationPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(AdminUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchReservationsId(ctx, id)
	return err
}

// PatchReservationsIdAccept converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ReservationPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchReservationsIdAccept(ctx, id)
	return err
}

// PatchReservationsIdCancel converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ReservationPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchReservationsIdCancel(ctx, id)
	return err
}

// PatchReservationsIdCheck converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdCheck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ReservationPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchReservationsIdCheck(ctx, id)
	return err
}

// PatchReservationsIdMenteeCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdMenteeCompletion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ReservationPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchReservationsIdMenteeCompletion(ctx, id)
	return err
}

// PatchReservationsIdMentorCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReservationsIdMentorCompletion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ReservationPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchReservationsIdMentorCompletion(ctx, id)
	return err
}

// GetSearchMentorSearchString converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearchMentorSearchString(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "search_string" -------------
	var searchString SearchStringPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "search_string", runtime.ParamLocationPath, ctx.Param("search_string"), &searchString)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_string: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchMentorSearchStringParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "search_by_user_nickname" -------------

	err = runtime.BindQueryParameter("form", true, false, "search_by_user_nickname", ctx.QueryParams(), &params.SearchByUserNickname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_by_user_nickname: %s", err))
	}

	// ------------- Optional query parameter "search_by_hashtag_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "search_by_hashtag_name", ctx.QueryParams(), &params.SearchByHashtagName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_by_hashtag_name: %s", err))
	}

	// ------------- Optional query parameter "search_by_category_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "search_by_category_name", ctx.QueryParams(), &params.SearchByCategoryName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search_by_category_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSearchMentorSearchString(ctx, searchString, params)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(NormalUserScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	ctx.Set(AdminUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(NormalUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersId(ctx, id)
	return err
}

// PatchUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersId(ctx, id)
	return err
}

// GetUsersIdReservations converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIdReservations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OwnerUserScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersIdReservationsParams
	// ------------- Required query parameter "take" -------------

	err = runtime.BindQueryParameter("form", true, true, "take", ctx.QueryParams(), &params.Take)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter take: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersIdReservations(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth", wrapper.GetAuth)
	router.GET(baseURL+"/auth/42", wrapper.GetAuth42)
	router.GET(baseURL+"/auth/42/callback", wrapper.GetAuth42Callback)
	router.GET(baseURL+"/auth/google", wrapper.GetAuthGoogle)
	router.GET(baseURL+"/auth/google/callback", wrapper.GetAuthGoogleCallback)
	router.GET(baseURL+"/categories", wrapper.GetCategories)
	router.GET(baseURL+"/hashtags", wrapper.GetHashtags)
	router.POST(baseURL+"/hashtags", wrapper.PostHashtags)
	router.GET(baseURL+"/home", wrapper.GetHome)
	router.GET(baseURL+"/home/:category_id", wrapper.GetHomeCategoryId)
	router.GET(baseURL+"/mentee_feedbacks", wrapper.GetMenteeFeedbacks)
	router.POST(baseURL+"/mentee_feedbacks", wrapper.PostMenteeFeedbacks)
	router.GET(baseURL+"/mentee_feedbacks/:id", wrapper.GetMenteeFeedbacksId)
	router.GET(baseURL+"/mentor_feedbacks", wrapper.GetMentorFeedbacks)
	router.POST(baseURL+"/mentor_feedbacks", wrapper.PostMentorFeedbacks)
	router.GET(baseURL+"/mentor_feedbacks/:id", wrapper.GetMentorFeedbacksId)
	router.GET(baseURL+"/mentor_profiles", wrapper.GetMentorProfiles)
	router.GET(baseURL+"/mentor_profiles/:id", wrapper.GetMentorProfilesId)
	router.PATCH(baseURL+"/mentor_profiles/:id", wrapper.PatchMentorProfilesId)
	router.PATCH(baseURL+"/mentor_profiles/:id/activation", wrapper.PatchMentorProfilesIdActivation)
	router.GET(baseURL+"/reservations", wrapper.GetReservations)
	router.POST(baseURL+"/reservations", wrapper.PostReservations)
	router.GET(baseURL+"/reservations/:id", wrapper.GetReservationsId)
	router.PATCH(baseURL+"/reservations/:id", wrapper.PatchReservationsId)
	router.PATCH(baseURL+"/reservations/:id/accept", wrapper.PatchReservationsIdAccept)
	router.PATCH(baseURL+"/reservations/:id/cancel", wrapper.PatchReservationsIdCancel)
	router.PATCH(baseURL+"/reservations/:id/check", wrapper.PatchReservationsIdCheck)
	router.PATCH(baseURL+"/reservations/:id/mentee_completion", wrapper.PatchReservationsIdMenteeCompletion)
	router.PATCH(baseURL+"/reservations/:id/mentor_completion", wrapper.PatchReservationsIdMentorCompletion)
	router.GET(baseURL+"/search/mentor/:search_string", wrapper.GetSearchMentorSearchString)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersId)
	router.PATCH(baseURL+"/users/:id", wrapper.PatchUsersId)
	router.GET(baseURL+"/users/:id/reservations", wrapper.GetUsersIdReservations)

}
