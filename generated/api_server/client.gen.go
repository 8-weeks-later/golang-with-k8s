// Package api_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api_server

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuth request
	GetAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthGoogle request
	GetAuthGoogle(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthGoogleCallback request
	GetAuthGoogleCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategories request
	GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHashtags request
	GetHashtags(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHashtagsWithBody request with any body
	PostHashtagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHashtags(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHome request
	GetHome(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHomeCategoryId request
	GetHomeCategoryId(ctx context.Context, categoryId CategoryPath, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMenteeFeedbacks request
	GetMenteeFeedbacks(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMenteeFeedbacksWithBody request with any body
	PostMenteeFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMenteeFeedbacks(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMenteeFeedbacksId request
	GetMenteeFeedbacksId(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorFeedbacks request
	GetMentorFeedbacks(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMentorFeedbacksWithBody request with any body
	PostMentorFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMentorFeedbacks(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorFeedbacksId request
	GetMentorFeedbacksId(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorProfiles request
	GetMentorProfiles(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMentorProfilesId request
	GetMentorProfilesId(ctx context.Context, id UserPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMentorProfilesIdWithBody request with any body
	PatchMentorProfilesIdWithBody(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMentorProfilesId(ctx context.Context, id UserPath, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMentorProfilesIdActivationWithBody request with any body
	PatchMentorProfilesIdActivationWithBody(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMentorProfilesIdActivation(ctx context.Context, id UserPath, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReservations request
	GetReservations(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReservationsWithBody request with any body
	PostReservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReservations(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReservationsId request
	GetReservationsId(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdWithBody request with any body
	PatchReservationsIdWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsId(ctx context.Context, id ReservationPath, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdAccept request
	PatchReservationsIdAccept(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdCancelWithBody request with any body
	PatchReservationsIdCancelWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsIdCancel(ctx context.Context, id ReservationPath, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdCheck request
	PatchReservationsIdCheck(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdMenteeCompletionWithBody request with any body
	PatchReservationsIdMenteeCompletionWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsIdMenteeCompletion(ctx context.Context, id ReservationPath, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReservationsIdMentorCompletionWithBody request with any body
	PatchReservationsIdMentorCompletionWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReservationsIdMentorCompletion(ctx context.Context, id ReservationPath, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchMentorSearchString request
	GetSearchMentorSearchString(ctx context.Context, searchString SearchStringPath, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWithBody request with any body
	PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersId request
	GetUsersId(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersIdWithBody request with any body
	PatchUsersIdWithBody(ctx context.Context, id IdPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersId(ctx context.Context, id IdPath, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersIdReservations request
	GetUsersIdReservations(ctx context.Context, id IdPath, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthGoogle(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthGoogleRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthGoogleCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthGoogleCallbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHashtags(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHashtagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHashtagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHashtagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHashtags(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHashtagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHome(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHomeCategoryId(ctx context.Context, categoryId CategoryPath, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeCategoryIdRequest(c.Server, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMenteeFeedbacks(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMenteeFeedbacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMenteeFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMenteeFeedbacksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMenteeFeedbacks(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMenteeFeedbacksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMenteeFeedbacksId(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMenteeFeedbacksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorFeedbacks(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorFeedbacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMentorFeedbacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMentorFeedbacksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMentorFeedbacks(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMentorFeedbacksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorFeedbacksId(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorFeedbacksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorProfiles(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMentorProfilesId(ctx context.Context, id UserPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMentorProfilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesIdWithBody(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesId(ctx context.Context, id UserPath, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesIdActivationWithBody(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdActivationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMentorProfilesIdActivation(ctx context.Context, id UserPath, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMentorProfilesIdActivationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservations(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReservations(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReservationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservationsId(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsId(ctx context.Context, id ReservationPath, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdAccept(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdAcceptRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdCancelWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdCancelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdCancel(ctx context.Context, id ReservationPath, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdCancelRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdCheck(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdCheckRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMenteeCompletionWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMenteeCompletionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMenteeCompletion(ctx context.Context, id ReservationPath, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMenteeCompletionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMentorCompletionWithBody(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMentorCompletionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReservationsIdMentorCompletion(ctx context.Context, id ReservationPath, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReservationsIdMentorCompletionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchMentorSearchString(ctx context.Context, searchString SearchStringPath, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchMentorSearchStringRequest(c.Server, searchString, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersIdWithBody(ctx context.Context, id IdPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersId(ctx context.Context, id IdPath, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersIdReservations(ctx context.Context, id IdPath, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdReservationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthRequest generates requests for GetAuth
func NewGetAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthGoogleRequest generates requests for GetAuthGoogle
func NewGetAuthGoogleRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/google")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthGoogleCallbackRequest generates requests for GetAuthGoogleCallback
func NewGetAuthGoogleCallbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/google/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHashtagsRequest generates requests for GetHashtags
func NewGetHashtagsRequest(server string, params *GetHashtagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hashtags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ProfileId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "profile_id", runtime.ParamLocationQuery, *params.ProfileId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHashtagsRequest calls the generic PostHashtags builder with application/json body
func NewPostHashtagsRequest(server string, body PostHashtagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHashtagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHashtagsRequestWithBody generates requests for PostHashtags with any type of body
func NewPostHashtagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hashtags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHomeRequest generates requests for GetHome
func NewGetHomeRequest(server string, params *GetHomeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHomeCategoryIdRequest generates requests for GetHomeCategoryId
func NewGetHomeCategoryIdRequest(server string, categoryId CategoryPath, params *GetHomeCategoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_id", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMenteeFeedbacksRequest generates requests for GetMenteeFeedbacks
func NewGetMenteeFeedbacksRequest(server string, params *GetMenteeFeedbacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentee_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ReservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MentorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentor_id", runtime.ParamLocationQuery, *params.MentorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MenteeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentee_id", runtime.ParamLocationQuery, *params.MenteeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMenteeFeedbacksRequest calls the generic PostMenteeFeedbacks builder with application/json body
func NewPostMenteeFeedbacksRequest(server string, body PostMenteeFeedbacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMenteeFeedbacksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMenteeFeedbacksRequestWithBody generates requests for PostMenteeFeedbacks with any type of body
func NewPostMenteeFeedbacksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentee_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMenteeFeedbacksIdRequest generates requests for GetMenteeFeedbacksId
func NewGetMenteeFeedbacksIdRequest(server string, id IdPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentee_feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMentorFeedbacksRequest generates requests for GetMentorFeedbacks
func NewGetMentorFeedbacksRequest(server string, params *GetMentorFeedbacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ReservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MentorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentor_id", runtime.ParamLocationQuery, *params.MentorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MenteeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mentee_id", runtime.ParamLocationQuery, *params.MenteeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMentorFeedbacksRequest calls the generic PostMentorFeedbacks builder with application/json body
func NewPostMentorFeedbacksRequest(server string, body PostMentorFeedbacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMentorFeedbacksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMentorFeedbacksRequestWithBody generates requests for PostMentorFeedbacks with any type of body
func NewPostMentorFeedbacksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMentorFeedbacksIdRequest generates requests for GetMentorFeedbacksId
func NewGetMentorFeedbacksIdRequest(server string, id IdPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMentorProfilesRequest generates requests for GetMentorProfiles
func NewGetMentorProfilesRequest(server string, params *GetMentorProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IsHide != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_hide", runtime.ParamLocationQuery, *params.IsHide); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HashtagId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashtag_id", runtime.ParamLocationQuery, *params.HashtagId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMentorProfilesIdRequest generates requests for GetMentorProfilesId
func NewGetMentorProfilesIdRequest(server string, id UserPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMentorProfilesIdRequest calls the generic PatchMentorProfilesId builder with application/json body
func NewPatchMentorProfilesIdRequest(server string, id UserPath, body PatchMentorProfilesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMentorProfilesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchMentorProfilesIdRequestWithBody generates requests for PatchMentorProfilesId with any type of body
func NewPatchMentorProfilesIdRequestWithBody(server string, id UserPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchMentorProfilesIdActivationRequest calls the generic PatchMentorProfilesIdActivation builder with application/json body
func NewPatchMentorProfilesIdActivationRequest(server string, id UserPath, body PatchMentorProfilesIdActivationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMentorProfilesIdActivationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchMentorProfilesIdActivationRequestWithBody generates requests for PatchMentorProfilesIdActivation with any type of body
func NewPatchMentorProfilesIdActivationRequestWithBody(server string, id UserPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mentor_profiles/%s/activation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReservationsRequest generates requests for GetReservations
func NewGetReservationsRequest(server string, params *GetReservationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.HashtagId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hashtag_id", runtime.ParamLocationQuery, *params.HashtagId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostReservationsRequest calls the generic PostReservations builder with application/json body
func NewPostReservationsRequest(server string, body PostReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReservationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReservationsRequestWithBody generates requests for PostReservations with any type of body
func NewPostReservationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReservationsIdRequest generates requests for GetReservationsId
func NewGetReservationsIdRequest(server string, id ReservationPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchReservationsIdRequest calls the generic PatchReservationsId builder with application/json body
func NewPatchReservationsIdRequest(server string, id ReservationPath, body PatchReservationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdRequestWithBody generates requests for PatchReservationsId with any type of body
func NewPatchReservationsIdRequestWithBody(server string, id ReservationPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchReservationsIdAcceptRequest generates requests for PatchReservationsIdAccept
func NewPatchReservationsIdAcceptRequest(server string, id ReservationPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchReservationsIdCancelRequest calls the generic PatchReservationsIdCancel builder with application/json body
func NewPatchReservationsIdCancelRequest(server string, id ReservationPath, body PatchReservationsIdCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdCancelRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdCancelRequestWithBody generates requests for PatchReservationsIdCancel with any type of body
func NewPatchReservationsIdCancelRequestWithBody(server string, id ReservationPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchReservationsIdCheckRequest generates requests for PatchReservationsIdCheck
func NewPatchReservationsIdCheckRequest(server string, id ReservationPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/check", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchReservationsIdMenteeCompletionRequest calls the generic PatchReservationsIdMenteeCompletion builder with application/json body
func NewPatchReservationsIdMenteeCompletionRequest(server string, id ReservationPath, body PatchReservationsIdMenteeCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdMenteeCompletionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdMenteeCompletionRequestWithBody generates requests for PatchReservationsIdMenteeCompletion with any type of body
func NewPatchReservationsIdMenteeCompletionRequestWithBody(server string, id ReservationPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/mentee_completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchReservationsIdMentorCompletionRequest calls the generic PatchReservationsIdMentorCompletion builder with application/json body
func NewPatchReservationsIdMentorCompletionRequest(server string, id ReservationPath, body PatchReservationsIdMentorCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReservationsIdMentorCompletionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchReservationsIdMentorCompletionRequestWithBody generates requests for PatchReservationsIdMentorCompletion with any type of body
func NewPatchReservationsIdMentorCompletionRequestWithBody(server string, id ReservationPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/mentor_completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchMentorSearchStringRequest generates requests for GetSearchMentorSearchString
func NewGetSearchMentorSearchStringRequest(server string, searchString SearchStringPath, params *GetSearchMentorSearchStringParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "search_string", runtime.ParamLocationPath, searchString)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/mentor/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SearchByUserNickname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_by_user_nickname", runtime.ParamLocationQuery, *params.SearchByUserNickname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchByHashtagName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_by_hashtag_name", runtime.ParamLocationQuery, *params.SearchByHashtagName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchByCategoryName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_by_category_name", runtime.ParamLocationQuery, *params.SearchByCategoryName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersRequest calls the generic PostUsers builder with application/json body
func NewPostUsersRequest(server string, body PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdRequest generates requests for GetUsersId
func NewGetUsersIdRequest(server string, id IdPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUsersIdRequest calls the generic PatchUsersId builder with application/json body
func NewPatchUsersIdRequest(server string, id IdPath, body PatchUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchUsersIdRequestWithBody generates requests for PatchUsersId with any type of body
func NewPatchUsersIdRequestWithBody(server string, id IdPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdReservationsRequest generates requests for GetUsersIdReservations
func NewGetUsersIdReservationsRequest(server string, id IdPath, params *GetUsersIdReservationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, params.Take); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuthWithResponse request
	GetAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResponse, error)

	// GetAuthGoogleWithResponse request
	GetAuthGoogleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthGoogleResponse, error)

	// GetAuthGoogleCallbackWithResponse request
	GetAuthGoogleCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthGoogleCallbackResponse, error)

	// GetCategoriesWithResponse request
	GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// GetHashtagsWithResponse request
	GetHashtagsWithResponse(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*GetHashtagsResponse, error)

	// PostHashtagsWithBodyWithResponse request with any body
	PostHashtagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error)

	PostHashtagsWithResponse(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error)

	// GetHomeWithResponse request
	GetHomeWithResponse(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*GetHomeResponse, error)

	// GetHomeCategoryIdWithResponse request
	GetHomeCategoryIdWithResponse(ctx context.Context, categoryId CategoryPath, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*GetHomeCategoryIdResponse, error)

	// GetMenteeFeedbacksWithResponse request
	GetMenteeFeedbacksWithResponse(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksResponse, error)

	// PostMenteeFeedbacksWithBodyWithResponse request with any body
	PostMenteeFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error)

	PostMenteeFeedbacksWithResponse(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error)

	// GetMenteeFeedbacksIdWithResponse request
	GetMenteeFeedbacksIdWithResponse(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksIdResponse, error)

	// GetMentorFeedbacksWithResponse request
	GetMentorFeedbacksWithResponse(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksResponse, error)

	// PostMentorFeedbacksWithBodyWithResponse request with any body
	PostMentorFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error)

	PostMentorFeedbacksWithResponse(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error)

	// GetMentorFeedbacksIdWithResponse request
	GetMentorFeedbacksIdWithResponse(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksIdResponse, error)

	// GetMentorProfilesWithResponse request
	GetMentorProfilesWithResponse(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*GetMentorProfilesResponse, error)

	// GetMentorProfilesIdWithResponse request
	GetMentorProfilesIdWithResponse(ctx context.Context, id UserPath, reqEditors ...RequestEditorFn) (*GetMentorProfilesIdResponse, error)

	// PatchMentorProfilesIdWithBodyWithResponse request with any body
	PatchMentorProfilesIdWithBodyWithResponse(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error)

	PatchMentorProfilesIdWithResponse(ctx context.Context, id UserPath, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error)

	// PatchMentorProfilesIdActivationWithBodyWithResponse request with any body
	PatchMentorProfilesIdActivationWithBodyWithResponse(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error)

	PatchMentorProfilesIdActivationWithResponse(ctx context.Context, id UserPath, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error)

	// GetReservationsWithResponse request
	GetReservationsWithResponse(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error)

	// PostReservationsWithBodyWithResponse request with any body
	PostReservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error)

	PostReservationsWithResponse(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error)

	// GetReservationsIdWithResponse request
	GetReservationsIdWithResponse(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error)

	// PatchReservationsIdWithBodyWithResponse request with any body
	PatchReservationsIdWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error)

	PatchReservationsIdWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error)

	// PatchReservationsIdAcceptWithResponse request
	PatchReservationsIdAcceptWithResponse(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*PatchReservationsIdAcceptResponse, error)

	// PatchReservationsIdCancelWithBodyWithResponse request with any body
	PatchReservationsIdCancelWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error)

	PatchReservationsIdCancelWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error)

	// PatchReservationsIdCheckWithResponse request
	PatchReservationsIdCheckWithResponse(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*PatchReservationsIdCheckResponse, error)

	// PatchReservationsIdMenteeCompletionWithBodyWithResponse request with any body
	PatchReservationsIdMenteeCompletionWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error)

	PatchReservationsIdMenteeCompletionWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error)

	// PatchReservationsIdMentorCompletionWithBodyWithResponse request with any body
	PatchReservationsIdMentorCompletionWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error)

	PatchReservationsIdMentorCompletionWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error)

	// GetSearchMentorSearchStringWithResponse request
	GetSearchMentorSearchStringWithResponse(ctx context.Context, searchString SearchStringPath, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*GetSearchMentorSearchStringResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// PostUsersWithBodyWithResponse request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// GetUsersIdWithResponse request
	GetUsersIdWithResponse(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// PatchUsersIdWithBodyWithResponse request with any body
	PatchUsersIdWithBodyWithResponse(ctx context.Context, id IdPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error)

	PatchUsersIdWithResponse(ctx context.Context, id IdPath, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error)

	// GetUsersIdReservationsWithResponse request
	GetUsersIdReservationsWithResponse(ctx context.Context, id IdPath, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*GetUsersIdReservationsResponse, error)
}

type GetAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthGet
}

// Status returns HTTPResponse.Status
func (r GetAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthGoogleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthGoogleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthGoogleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthGoogleCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthGoogleCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthGoogleCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CategoryGet
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHashtagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HashtagPagination
}

// Status returns HTTPResponse.Status
func (r GetHashtagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHashtagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHashtagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HashtagGet
	JSON201      *HashtagGet
}

// Status returns HTTPResponse.Status
func (r PostHashtagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHashtagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HomeGet
}

// Status returns HTTPResponse.Status
func (r GetHomeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HomeGet
}

// Status returns HTTPResponse.Status
func (r GetHomeCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMenteeFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MenteeFeedbackPagintaion
}

// Status returns HTTPResponse.Status
func (r GetMenteeFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMenteeFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMenteeFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MenteeFeedbackGet
}

// Status returns HTTPResponse.Status
func (r PostMenteeFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMenteeFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMenteeFeedbacksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MenteeFeedbackGet
}

// Status returns HTTPResponse.Status
func (r GetMenteeFeedbacksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMenteeFeedbacksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorFeedbackPagintaion
}

// Status returns HTTPResponse.Status
func (r GetMentorFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMentorFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MentorFeedbackGet
}

// Status returns HTTPResponse.Status
func (r PostMentorFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMentorFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorFeedbacksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorFeedbackGet
}

// Status returns HTTPResponse.Status
func (r GetMentorFeedbacksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorFeedbacksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MentorProfilePagintaion
}

// Status returns HTTPResponse.Status
func (r GetMentorProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMentorProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMentorProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMentorProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMentorProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorProfileGet
}

// Status returns HTTPResponse.Status
func (r PatchMentorProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMentorProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMentorProfilesIdActivationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MentorProfileGet
}

// Status returns HTTPResponse.Status
func (r PatchMentorProfilesIdActivationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMentorProfilesIdActivationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]interface{}
}

// Status returns HTTPResponse.Status
func (r GetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PostReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReservationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r GetReservationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReservationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdMenteeCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdMenteeCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdMenteeCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReservationsIdMentorCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReservationGet
}

// Status returns HTTPResponse.Status
func (r PatchReservationsIdMentorCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReservationsIdMentorCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchMentorSearchStringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HomeGet
}

// Status returns HTTPResponse.Status
func (r GetSearchMentorSearchStringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchMentorSearchStringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserGet
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserGet
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGet
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGet
}

// Status returns HTTPResponse.Status
func (r PatchUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserReservationPagination
}

// Status returns HTTPResponse.Status
func (r GetUsersIdReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthWithResponse request returning *GetAuthResponse
func (c *ClientWithResponses) GetAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResponse, error) {
	rsp, err := c.GetAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthResponse(rsp)
}

// GetAuthGoogleWithResponse request returning *GetAuthGoogleResponse
func (c *ClientWithResponses) GetAuthGoogleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthGoogleResponse, error) {
	rsp, err := c.GetAuthGoogle(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthGoogleResponse(rsp)
}

// GetAuthGoogleCallbackWithResponse request returning *GetAuthGoogleCallbackResponse
func (c *ClientWithResponses) GetAuthGoogleCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthGoogleCallbackResponse, error) {
	rsp, err := c.GetAuthGoogleCallback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthGoogleCallbackResponse(rsp)
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// GetHashtagsWithResponse request returning *GetHashtagsResponse
func (c *ClientWithResponses) GetHashtagsWithResponse(ctx context.Context, params *GetHashtagsParams, reqEditors ...RequestEditorFn) (*GetHashtagsResponse, error) {
	rsp, err := c.GetHashtags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHashtagsResponse(rsp)
}

// PostHashtagsWithBodyWithResponse request with arbitrary body returning *PostHashtagsResponse
func (c *ClientWithResponses) PostHashtagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error) {
	rsp, err := c.PostHashtagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHashtagsResponse(rsp)
}

func (c *ClientWithResponses) PostHashtagsWithResponse(ctx context.Context, body PostHashtagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHashtagsResponse, error) {
	rsp, err := c.PostHashtags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHashtagsResponse(rsp)
}

// GetHomeWithResponse request returning *GetHomeResponse
func (c *ClientWithResponses) GetHomeWithResponse(ctx context.Context, params *GetHomeParams, reqEditors ...RequestEditorFn) (*GetHomeResponse, error) {
	rsp, err := c.GetHome(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeResponse(rsp)
}

// GetHomeCategoryIdWithResponse request returning *GetHomeCategoryIdResponse
func (c *ClientWithResponses) GetHomeCategoryIdWithResponse(ctx context.Context, categoryId CategoryPath, params *GetHomeCategoryIdParams, reqEditors ...RequestEditorFn) (*GetHomeCategoryIdResponse, error) {
	rsp, err := c.GetHomeCategoryId(ctx, categoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeCategoryIdResponse(rsp)
}

// GetMenteeFeedbacksWithResponse request returning *GetMenteeFeedbacksResponse
func (c *ClientWithResponses) GetMenteeFeedbacksWithResponse(ctx context.Context, params *GetMenteeFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksResponse, error) {
	rsp, err := c.GetMenteeFeedbacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMenteeFeedbacksResponse(rsp)
}

// PostMenteeFeedbacksWithBodyWithResponse request with arbitrary body returning *PostMenteeFeedbacksResponse
func (c *ClientWithResponses) PostMenteeFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error) {
	rsp, err := c.PostMenteeFeedbacksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMenteeFeedbacksResponse(rsp)
}

func (c *ClientWithResponses) PostMenteeFeedbacksWithResponse(ctx context.Context, body PostMenteeFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMenteeFeedbacksResponse, error) {
	rsp, err := c.PostMenteeFeedbacks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMenteeFeedbacksResponse(rsp)
}

// GetMenteeFeedbacksIdWithResponse request returning *GetMenteeFeedbacksIdResponse
func (c *ClientWithResponses) GetMenteeFeedbacksIdWithResponse(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*GetMenteeFeedbacksIdResponse, error) {
	rsp, err := c.GetMenteeFeedbacksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMenteeFeedbacksIdResponse(rsp)
}

// GetMentorFeedbacksWithResponse request returning *GetMentorFeedbacksResponse
func (c *ClientWithResponses) GetMentorFeedbacksWithResponse(ctx context.Context, params *GetMentorFeedbacksParams, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksResponse, error) {
	rsp, err := c.GetMentorFeedbacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorFeedbacksResponse(rsp)
}

// PostMentorFeedbacksWithBodyWithResponse request with arbitrary body returning *PostMentorFeedbacksResponse
func (c *ClientWithResponses) PostMentorFeedbacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error) {
	rsp, err := c.PostMentorFeedbacksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMentorFeedbacksResponse(rsp)
}

func (c *ClientWithResponses) PostMentorFeedbacksWithResponse(ctx context.Context, body PostMentorFeedbacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMentorFeedbacksResponse, error) {
	rsp, err := c.PostMentorFeedbacks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMentorFeedbacksResponse(rsp)
}

// GetMentorFeedbacksIdWithResponse request returning *GetMentorFeedbacksIdResponse
func (c *ClientWithResponses) GetMentorFeedbacksIdWithResponse(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*GetMentorFeedbacksIdResponse, error) {
	rsp, err := c.GetMentorFeedbacksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorFeedbacksIdResponse(rsp)
}

// GetMentorProfilesWithResponse request returning *GetMentorProfilesResponse
func (c *ClientWithResponses) GetMentorProfilesWithResponse(ctx context.Context, params *GetMentorProfilesParams, reqEditors ...RequestEditorFn) (*GetMentorProfilesResponse, error) {
	rsp, err := c.GetMentorProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorProfilesResponse(rsp)
}

// GetMentorProfilesIdWithResponse request returning *GetMentorProfilesIdResponse
func (c *ClientWithResponses) GetMentorProfilesIdWithResponse(ctx context.Context, id UserPath, reqEditors ...RequestEditorFn) (*GetMentorProfilesIdResponse, error) {
	rsp, err := c.GetMentorProfilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMentorProfilesIdResponse(rsp)
}

// PatchMentorProfilesIdWithBodyWithResponse request with arbitrary body returning *PatchMentorProfilesIdResponse
func (c *ClientWithResponses) PatchMentorProfilesIdWithBodyWithResponse(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error) {
	rsp, err := c.PatchMentorProfilesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchMentorProfilesIdWithResponse(ctx context.Context, id UserPath, body PatchMentorProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdResponse, error) {
	rsp, err := c.PatchMentorProfilesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdResponse(rsp)
}

// PatchMentorProfilesIdActivationWithBodyWithResponse request with arbitrary body returning *PatchMentorProfilesIdActivationResponse
func (c *ClientWithResponses) PatchMentorProfilesIdActivationWithBodyWithResponse(ctx context.Context, id UserPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error) {
	rsp, err := c.PatchMentorProfilesIdActivationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdActivationResponse(rsp)
}

func (c *ClientWithResponses) PatchMentorProfilesIdActivationWithResponse(ctx context.Context, id UserPath, body PatchMentorProfilesIdActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMentorProfilesIdActivationResponse, error) {
	rsp, err := c.PatchMentorProfilesIdActivation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMentorProfilesIdActivationResponse(rsp)
}

// GetReservationsWithResponse request returning *GetReservationsResponse
func (c *ClientWithResponses) GetReservationsWithResponse(ctx context.Context, params *GetReservationsParams, reqEditors ...RequestEditorFn) (*GetReservationsResponse, error) {
	rsp, err := c.GetReservations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsResponse(rsp)
}

// PostReservationsWithBodyWithResponse request with arbitrary body returning *PostReservationsResponse
func (c *ClientWithResponses) PostReservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error) {
	rsp, err := c.PostReservationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsResponse(rsp)
}

func (c *ClientWithResponses) PostReservationsWithResponse(ctx context.Context, body PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReservationsResponse, error) {
	rsp, err := c.PostReservations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReservationsResponse(rsp)
}

// GetReservationsIdWithResponse request returning *GetReservationsIdResponse
func (c *ClientWithResponses) GetReservationsIdWithResponse(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*GetReservationsIdResponse, error) {
	rsp, err := c.GetReservationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationsIdResponse(rsp)
}

// PatchReservationsIdWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdResponse
func (c *ClientWithResponses) PatchReservationsIdWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error) {
	rsp, err := c.PatchReservationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdResponse, error) {
	rsp, err := c.PatchReservationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdResponse(rsp)
}

// PatchReservationsIdAcceptWithResponse request returning *PatchReservationsIdAcceptResponse
func (c *ClientWithResponses) PatchReservationsIdAcceptWithResponse(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*PatchReservationsIdAcceptResponse, error) {
	rsp, err := c.PatchReservationsIdAccept(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdAcceptResponse(rsp)
}

// PatchReservationsIdCancelWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdCancelResponse
func (c *ClientWithResponses) PatchReservationsIdCancelWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error) {
	rsp, err := c.PatchReservationsIdCancelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdCancelResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdCancelWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdCancelResponse, error) {
	rsp, err := c.PatchReservationsIdCancel(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdCancelResponse(rsp)
}

// PatchReservationsIdCheckWithResponse request returning *PatchReservationsIdCheckResponse
func (c *ClientWithResponses) PatchReservationsIdCheckWithResponse(ctx context.Context, id ReservationPath, reqEditors ...RequestEditorFn) (*PatchReservationsIdCheckResponse, error) {
	rsp, err := c.PatchReservationsIdCheck(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdCheckResponse(rsp)
}

// PatchReservationsIdMenteeCompletionWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdMenteeCompletionResponse
func (c *ClientWithResponses) PatchReservationsIdMenteeCompletionWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMenteeCompletionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMenteeCompletionResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdMenteeCompletionWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdMenteeCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMenteeCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMenteeCompletion(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMenteeCompletionResponse(rsp)
}

// PatchReservationsIdMentorCompletionWithBodyWithResponse request with arbitrary body returning *PatchReservationsIdMentorCompletionResponse
func (c *ClientWithResponses) PatchReservationsIdMentorCompletionWithBodyWithResponse(ctx context.Context, id ReservationPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMentorCompletionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMentorCompletionResponse(rsp)
}

func (c *ClientWithResponses) PatchReservationsIdMentorCompletionWithResponse(ctx context.Context, id ReservationPath, body PatchReservationsIdMentorCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReservationsIdMentorCompletionResponse, error) {
	rsp, err := c.PatchReservationsIdMentorCompletion(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReservationsIdMentorCompletionResponse(rsp)
}

// GetSearchMentorSearchStringWithResponse request returning *GetSearchMentorSearchStringResponse
func (c *ClientWithResponses) GetSearchMentorSearchStringWithResponse(ctx context.Context, searchString SearchStringPath, params *GetSearchMentorSearchStringParams, reqEditors ...RequestEditorFn) (*GetSearchMentorSearchStringResponse, error) {
	rsp, err := c.GetSearchMentorSearchString(ctx, searchString, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchMentorSearchStringResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

func (c *ClientWithResponses) PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// GetUsersIdWithResponse request returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id IdPath, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// PatchUsersIdWithBodyWithResponse request with arbitrary body returning *PatchUsersIdResponse
func (c *ClientWithResponses) PatchUsersIdWithBodyWithResponse(ctx context.Context, id IdPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error) {
	rsp, err := c.PatchUsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersIdWithResponse(ctx context.Context, id IdPath, body PatchUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersIdResponse, error) {
	rsp, err := c.PatchUsersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersIdResponse(rsp)
}

// GetUsersIdReservationsWithResponse request returning *GetUsersIdReservationsResponse
func (c *ClientWithResponses) GetUsersIdReservationsWithResponse(ctx context.Context, id IdPath, params *GetUsersIdReservationsParams, reqEditors ...RequestEditorFn) (*GetUsersIdReservationsResponse, error) {
	rsp, err := c.GetUsersIdReservations(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdReservationsResponse(rsp)
}

// ParseGetAuthResponse parses an HTTP response from a GetAuthWithResponse call
func ParseGetAuthResponse(rsp *http.Response) (*GetAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthGoogleResponse parses an HTTP response from a GetAuthGoogleWithResponse call
func ParseGetAuthGoogleResponse(rsp *http.Response) (*GetAuthGoogleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthGoogleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthGoogleCallbackResponse parses an HTTP response from a GetAuthGoogleCallbackWithResponse call
func ParseGetAuthGoogleCallbackResponse(rsp *http.Response) (*GetAuthGoogleCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthGoogleCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CategoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHashtagsResponse parses an HTTP response from a GetHashtagsWithResponse call
func ParseGetHashtagsResponse(rsp *http.Response) (*GetHashtagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHashtagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HashtagPagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostHashtagsResponse parses an HTTP response from a PostHashtagsWithResponse call
func ParsePostHashtagsResponse(rsp *http.Response) (*PostHashtagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHashtagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HashtagGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HashtagGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetHomeResponse parses an HTTP response from a GetHomeWithResponse call
func ParseGetHomeResponse(rsp *http.Response) (*GetHomeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HomeGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHomeCategoryIdResponse parses an HTTP response from a GetHomeCategoryIdWithResponse call
func ParseGetHomeCategoryIdResponse(rsp *http.Response) (*GetHomeCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HomeGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMenteeFeedbacksResponse parses an HTTP response from a GetMenteeFeedbacksWithResponse call
func ParseGetMenteeFeedbacksResponse(rsp *http.Response) (*GetMenteeFeedbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMenteeFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MenteeFeedbackPagintaion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMenteeFeedbacksResponse parses an HTTP response from a PostMenteeFeedbacksWithResponse call
func ParsePostMenteeFeedbacksResponse(rsp *http.Response) (*PostMenteeFeedbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMenteeFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MenteeFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMenteeFeedbacksIdResponse parses an HTTP response from a GetMenteeFeedbacksIdWithResponse call
func ParseGetMenteeFeedbacksIdResponse(rsp *http.Response) (*GetMenteeFeedbacksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMenteeFeedbacksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MenteeFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMentorFeedbacksResponse parses an HTTP response from a GetMentorFeedbacksWithResponse call
func ParseGetMentorFeedbacksResponse(rsp *http.Response) (*GetMentorFeedbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorFeedbackPagintaion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMentorFeedbacksResponse parses an HTTP response from a PostMentorFeedbacksWithResponse call
func ParsePostMentorFeedbacksResponse(rsp *http.Response) (*PostMentorFeedbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMentorFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MentorFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMentorFeedbacksIdResponse parses an HTTP response from a GetMentorFeedbacksIdWithResponse call
func ParseGetMentorFeedbacksIdResponse(rsp *http.Response) (*GetMentorFeedbacksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorFeedbacksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorFeedbackGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMentorProfilesResponse parses an HTTP response from a GetMentorProfilesWithResponse call
func ParseGetMentorProfilesResponse(rsp *http.Response) (*GetMentorProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MentorProfilePagintaion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMentorProfilesIdResponse parses an HTTP response from a GetMentorProfilesIdWithResponse call
func ParseGetMentorProfilesIdResponse(rsp *http.Response) (*GetMentorProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMentorProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchMentorProfilesIdResponse parses an HTTP response from a PatchMentorProfilesIdWithResponse call
func ParsePatchMentorProfilesIdResponse(rsp *http.Response) (*PatchMentorProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMentorProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorProfileGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchMentorProfilesIdActivationResponse parses an HTTP response from a PatchMentorProfilesIdActivationWithResponse call
func ParsePatchMentorProfilesIdActivationResponse(rsp *http.Response) (*PatchMentorProfilesIdActivationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMentorProfilesIdActivationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MentorProfileGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReservationsResponse parses an HTTP response from a GetReservationsWithResponse call
func ParseGetReservationsResponse(rsp *http.Response) (*GetReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReservationsResponse parses an HTTP response from a PostReservationsWithResponse call
func ParsePostReservationsResponse(rsp *http.Response) (*PostReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetReservationsIdResponse parses an HTTP response from a GetReservationsIdWithResponse call
func ParseGetReservationsIdResponse(rsp *http.Response) (*GetReservationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReservationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdResponse parses an HTTP response from a PatchReservationsIdWithResponse call
func ParsePatchReservationsIdResponse(rsp *http.Response) (*PatchReservationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdAcceptResponse parses an HTTP response from a PatchReservationsIdAcceptWithResponse call
func ParsePatchReservationsIdAcceptResponse(rsp *http.Response) (*PatchReservationsIdAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdCancelResponse parses an HTTP response from a PatchReservationsIdCancelWithResponse call
func ParsePatchReservationsIdCancelResponse(rsp *http.Response) (*PatchReservationsIdCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdCheckResponse parses an HTTP response from a PatchReservationsIdCheckWithResponse call
func ParsePatchReservationsIdCheckResponse(rsp *http.Response) (*PatchReservationsIdCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdMenteeCompletionResponse parses an HTTP response from a PatchReservationsIdMenteeCompletionWithResponse call
func ParsePatchReservationsIdMenteeCompletionResponse(rsp *http.Response) (*PatchReservationsIdMenteeCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdMenteeCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReservationsIdMentorCompletionResponse parses an HTTP response from a PatchReservationsIdMentorCompletionWithResponse call
func ParsePatchReservationsIdMentorCompletionResponse(rsp *http.Response) (*PatchReservationsIdMentorCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReservationsIdMentorCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReservationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchMentorSearchStringResponse parses an HTTP response from a GetSearchMentorSearchStringWithResponse call
func ParseGetSearchMentorSearchStringResponse(rsp *http.Response) (*GetSearchMentorSearchStringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchMentorSearchStringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HomeGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUsersIdResponse parses an HTTP response from a PatchUsersIdWithResponse call
func ParsePatchUsersIdResponse(rsp *http.Response) (*PatchUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersIdReservationsResponse parses an HTTP response from a GetUsersIdReservationsWithResponse call
func ParseGetUsersIdReservationsResponse(rsp *http.Response) (*GetUsersIdReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserReservationPagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
